!function(r,s,u){var f=r.requestAnimationFrame||r.webkitRequestAnimationFrame||r.mozRequestAnimationFrame||r.oRequestAnimationFrame||r.msRequestAnimationFrame||function(t){r.setTimeout(t,1e3/60)},g=function(){var n={},o=s.createElement("div").style,e=function(){for(var t=["t","webkitT","MozT","msT","OT"],e=0,i=t.length;e<i;e++)if(t[e]+"ransform"in o)return t[e].substr(0,t[e].length-1);return!1}();function t(t){return!1!==e&&(""===e?t:e+t.charAt(0).toUpperCase()+t.substr(1))}n.getTime=Date.now||function(){return(new Date).getTime()},n.extend=function(t,e){for(var i in e)t[i]=e[i]},n.addEvent=function(t,e,i,n){t.addEventListener(e,i,!!n)},n.removeEvent=function(t,e,i,n){t.removeEventListener(e,i,!!n)},n.prefixPointerEvent=function(t){return r.MSPointerEvent?"MSPointer"+t.charAt(7).toUpperCase()+t.substr(8):t},n.momentum=function(t,e,i,n,o,s){var r,a,l=t-e,c=u.abs(l)/i;return a=c/(s=void 0===s?6e-4:s),(r=t+c*c/(2*s)*(l<0?-1:1))<n?(r=o?n-o/2.5*(c/8):n,a=(l=u.abs(r-t))/c):0<r&&(r=o?o/2.5*(c/8):0,a=(l=u.abs(t)+r)/c),{destination:u.round(r),duration:a}};var i=t("transform");return n.extend(n,{hasTransform:!1!==i,hasPerspective:t("perspective")in o,hasTouch:"ontouchstart"in r,hasPointer:!(!r.PointerEvent&&!r.MSPointerEvent),hasTransition:t("transition")in o}),n.isBadAndroid=function(){var t=r.navigator.appVersion;if(!/Android/.test(t)||/Chrome\/\d/.test(t))return!1;var e=t.match(/Safari\/(\d+.\d)/);return!(e&&"object"==typeof e&&2<=e.length)||parseFloat(e[1])<535.19}(),n.extend(n.style={},{transform:i,transitionTimingFunction:t("transitionTimingFunction"),transitionDuration:t("transitionDuration"),transitionDelay:t("transitionDelay"),transformOrigin:t("transformOrigin")}),n.hasClass=function(t,e){return new RegExp("(^|\\s)"+e+"(\\s|$)").test(t.className)},n.addClass=function(t,e){if(!n.hasClass(t,e)){var i=t.className.split(" ");i.push(e),t.className=i.join(" ")}},n.removeClass=function(t,e){if(n.hasClass(t,e)){var i=new RegExp("(^|\\s)"+e+"(\\s|$)","g");t.className=t.className.replace(i," ")}},n.offset=function(t){for(var e=-t.offsetLeft,i=-t.offsetTop;t=t.offsetParent;)e-=t.offsetLeft,i-=t.offsetTop;return{left:e,top:i}},n.preventDefaultException=function(t,e){for(var i in e)if(e[i].test(t[i]))return!0;return!1},n.extend(n.eventType={},{touchstart:1,touchmove:1,touchend:1,mousedown:2,mousemove:2,mouseup:2,pointerdown:3,pointermove:3,pointerup:3,MSPointerDown:3,MSPointerMove:3,MSPointerUp:3}),n.extend(n.ease={},{quadratic:{style:"cubic-bezier(0.25, 0.46, 0.45, 0.94)",fn:function(t){return t*(2-t)}},circular:{style:"cubic-bezier(0.1, 0.57, 0.1, 1)",fn:function(t){return u.sqrt(1- --t*t)}},back:{style:"cubic-bezier(0.175, 0.885, 0.32, 1.275)",fn:function(t){return--t*t*(5*t+4)+1}},bounce:{style:"",fn:function(t){return(t/=1)<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}},elastic:{style:"",fn:function(t){return 0===t?0:1==t?1:.4*u.pow(2,-10*t)*u.sin((t-.055)*(2*u.PI)/.22)+1}}}),n.tap=function(t,e){var i=s.createEvent("Event");i.initEvent(e,!0,!0),i.pageX=t.pageX,i.pageY=t.pageY,t.target.dispatchEvent(i)},n.click=function(t){var e,i=t.target;/(SELECT|INPUT|TEXTAREA)/i.test(i.tagName)||((e=s.createEvent(r.MouseEvent?"MouseEvents":"Event")).initEvent("click",!0,!0),e.view=t.view||r,e.detail=1,e.screenX=i.screenX||0,e.screenY=i.screenY||0,e.clientX=i.clientX||0,e.clientY=i.clientY||0,e.ctrlKey=!!t.ctrlKey,e.altKey=!!t.altKey,e.shiftKey=!!t.shiftKey,e.metaKey=!!t.metaKey,e.button=0,e.relatedTarget=null,e._constructed=!0,i.dispatchEvent(e))},n}();function t(t,e){for(var i in this.wrapper="string"==typeof t?s.querySelector(t):t,this.scroller=this.wrapper.children[0],this.scrollerStyle=this.scroller.style,this.options={resizeScrollbars:!0,mouseWheelSpeed:20,snapThreshold:.334,disablePointer:!g.hasPointer,disableTouch:g.hasPointer||!g.hasTouch,disableMouse:g.hasPointer||g.hasTouch,startX:0,startY:0,scrollY:!0,directionLockThreshold:5,momentum:!0,bounce:!0,bounceTime:600,bounceEasing:"",preventDefault:!0,preventDefaultException:{tagName:/^(INPUT|TEXTAREA|BUTTON|SELECT|LABEL)$/},HWCompositing:!0,useTransition:!0,useTransform:!0,bindToWrapper:void 0===r.onmousedown},e)this.options[i]=e[i];this.translateZ=this.options.HWCompositing&&g.hasPerspective?" translateZ(0)":"",this.options.useTransition=g.hasTransition&&this.options.useTransition,this.options.useTransform=g.hasTransform&&this.options.useTransform,this.options.eventPassthrough=!0===this.options.eventPassthrough?"vertical":this.options.eventPassthrough,this.options.preventDefault=!this.options.eventPassthrough&&this.options.preventDefault,this.options.scrollY="vertical"!=this.options.eventPassthrough&&this.options.scrollY,this.options.scrollX="horizontal"!=this.options.eventPassthrough&&this.options.scrollX,this.options.freeScroll=this.options.freeScroll&&!this.options.eventPassthrough,this.options.directionLockThreshold=this.options.eventPassthrough?0:this.options.directionLockThreshold,this.options.bounceEasing="string"==typeof this.options.bounceEasing?g.ease[this.options.bounceEasing]||g.ease.circular:this.options.bounceEasing,this.options.resizePolling=void 0===this.options.resizePolling?60:this.options.resizePolling,!0===this.options.tap&&(this.options.tap="tap"),this.options.useTransition||this.options.useTransform||/relative|absolute/i.test(this.scrollerStyle.position)||(this.scrollerStyle.position="relative"),"scale"==this.options.shrinkScrollbars&&(this.options.useTransition=!1),this.options.invertWheelDirection=this.options.invertWheelDirection?-1:1,this.x=0,this.y=0,this.directionX=0,this.directionY=0,this._events={},this._init(),this.refresh(),this.scrollTo(this.options.startX,this.options.startY),this.enable()}function a(t,e,i){var n=s.createElement("div"),o=s.createElement("div");return!0===i&&(n.style.cssText="position:absolute;z-index:9999",o.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0.5);border:1px solid rgba(255,255,255,0.9);border-radius:3px"),o.className="iScrollIndicator",n.className="h"==t?(!0===i&&(n.style.cssText+=";height:7px;left:2px;right:2px;bottom:0",o.style.height="100%"),"iScrollHorizontalScrollbar"):(!0===i&&(n.style.cssText+=";width:7px;bottom:2px;top:2px;right:1px",o.style.width="100%"),"iScrollVerticalScrollbar"),n.style.cssText+=";overflow:hidden",e||(n.style.pointerEvents="none"),n.appendChild(o),n}function l(t,e){for(var i in this.wrapper="string"==typeof e.el?s.querySelector(e.el):e.el,this.wrapperStyle=this.wrapper.style,this.indicator=this.wrapper.children[0],this.indicatorStyle=this.indicator.style,this.scroller=t,this.options={listenX:!0,listenY:!0,interactive:!1,resize:!0,defaultScrollbars:!1,shrink:!1,fade:!1,speedRatioX:0,speedRatioY:0},e)this.options[i]=e[i];if(this.sizeRatioX=1,this.sizeRatioY=1,this.maxPosX=0,this.maxPosY=0,this.options.interactive&&(this.options.disableTouch||(g.addEvent(this.indicator,"touchstart",this),g.addEvent(r,"touchend",this)),this.options.disablePointer||(g.addEvent(this.indicator,g.prefixPointerEvent("pointerdown"),this),g.addEvent(r,g.prefixPointerEvent("pointerup"),this)),this.options.disableMouse||(g.addEvent(this.indicator,"mousedown",this),g.addEvent(r,"mouseup",this))),this.options.fade){this.wrapperStyle[g.style.transform]=this.scroller.translateZ;var n=g.style.transitionDuration;if(!n)return;this.wrapperStyle[n]=g.isBadAndroid?"0.0001ms":"0ms";var o=this;g.isBadAndroid&&f(function(){"0.0001ms"===o.wrapperStyle[n]&&(o.wrapperStyle[n]="0s")}),this.wrapperStyle.opacity="0"}}t.prototype={version:"5.2.0",_init:function(){this._initEvents(),(this.options.scrollbars||this.options.indicators)&&this._initIndicators(),this.options.mouseWheel&&this._initWheel(),this.options.snap&&this._initSnap(),this.options.keyBindings&&this._initKeys()},destroy:function(){this._initEvents(!0),clearTimeout(this.resizeTimeout),this.resizeTimeout=null,this._execEvent("destroy")},_transitionEnd:function(t){t.target==this.scroller&&this.isInTransition&&(this._transitionTime(),this.resetPosition(this.options.bounceTime)||(this.isInTransition=!1,this._execEvent("scrollEnd")))},_start:function(t){if((1==g.eventType[t.type]||0===(t.which?t.button:t.button<2?0:4==t.button?1:2))&&this.enabled&&(!this.initiated||g.eventType[t.type]===this.initiated)){!this.options.preventDefault||g.isBadAndroid||g.preventDefaultException(t.target,this.options.preventDefaultException)||t.preventDefault();var e,i=t.touches?t.touches[0]:t;this.initiated=g.eventType[t.type],this.moved=!1,this.distX=0,this.distY=0,this.directionX=0,this.directionY=0,this.directionLocked=0,this.startTime=g.getTime(),this.options.useTransition&&this.isInTransition?(this._transitionTime(),this.isInTransition=!1,e=this.getComputedPosition(),this._translate(u.round(e.x),u.round(e.y)),this._execEvent("scrollEnd")):!this.options.useTransition&&this.isAnimating&&(this.isAnimating=!1,this._execEvent("scrollEnd")),this.startX=this.x,this.startY=this.y,this.absStartX=this.x,this.absStartY=this.y,this.pointX=i.pageX,this.pointY=i.pageY,this._execEvent("beforeScrollStart")}},_move:function(t){if(this.enabled&&g.eventType[t.type]===this.initiated){this.options.preventDefault&&t.preventDefault();var e,i,n,o,s=t.touches?t.touches[0]:t,r=s.pageX-this.pointX,a=s.pageY-this.pointY,l=g.getTime();if(this.pointX=s.pageX,this.pointY=s.pageY,this.distX+=r,this.distY+=a,n=u.abs(this.distX),o=u.abs(this.distY),!(300<l-this.endTime&&n<10&&o<10)){if(this.directionLocked||this.options.freeScroll||(n>o+this.options.directionLockThreshold?this.directionLocked="h":o>=n+this.options.directionLockThreshold?this.directionLocked="v":this.directionLocked="n"),"h"==this.directionLocked){if("vertical"==this.options.eventPassthrough)t.preventDefault();else if("horizontal"==this.options.eventPassthrough)return void(this.initiated=!1);a=0}else if("v"==this.directionLocked){if("horizontal"==this.options.eventPassthrough)t.preventDefault();else if("vertical"==this.options.eventPassthrough)return void(this.initiated=!1);r=0}r=this.hasHorizontalScroll?r:0,a=this.hasVerticalScroll?a:0,e=this.x+r,i=this.y+a,(0<e||e<this.maxScrollX)&&(e=this.options.bounce?this.x+r/3:0<e?0:this.maxScrollX),(0<i||i<this.maxScrollY)&&(i=this.options.bounce?this.y+a/3:0<i?0:this.maxScrollY),this.directionX=0<r?-1:r<0?1:0,this.directionY=0<a?-1:a<0?1:0,this.moved||this._execEvent("scrollStart"),this.moved=!0,this._translate(e,i),300<l-this.startTime&&(this.startTime=l,this.startX=this.x,this.startY=this.y)}}},_end:function(t){if(this.enabled&&g.eventType[t.type]===this.initiated){this.options.preventDefault&&!g.preventDefaultException(t.target,this.options.preventDefaultException)&&t.preventDefault(),t.changedTouches&&t.changedTouches[0];var e,i,n=g.getTime()-this.startTime,o=u.round(this.x),s=u.round(this.y),r=u.abs(o-this.startX),a=u.abs(s-this.startY),l=0,c="";if(this.isInTransition=0,this.initiated=0,this.endTime=g.getTime(),!this.resetPosition(this.options.bounceTime)){if(this.scrollTo(o,s),!this.moved)return this.options.tap&&g.tap(t,this.options.tap),this.options.click&&g.click(t),void this._execEvent("scrollCancel");if(this._events.flick&&n<200&&r<100&&a<100)this._execEvent("flick");else{if(this.options.momentum&&n<300&&(e=this.hasHorizontalScroll?g.momentum(this.x,this.startX,n,this.maxScrollX,this.options.bounce?this.wrapperWidth:0,this.options.deceleration):{destination:o,duration:0},i=this.hasVerticalScroll?g.momentum(this.y,this.startY,n,this.maxScrollY,this.options.bounce?this.wrapperHeight:0,this.options.deceleration):{destination:s,duration:0},o=e.destination,s=i.destination,l=u.max(e.duration,i.duration),this.isInTransition=1),this.options.snap){var h=this._nearestSnap(o,s);this.currentPage=h,l=this.options.snapSpeed||u.max(u.max(u.min(u.abs(o-h.x),1e3),u.min(u.abs(s-h.y),1e3)),300),o=h.x,s=h.y,this.directionX=0,this.directionY=0,c=this.options.bounceEasing}if(o!=this.x||s!=this.y)return(0<o||o<this.maxScrollX||0<s||s<this.maxScrollY)&&(c=g.ease.quadratic),void this.scrollTo(o,s,l,c);this._execEvent("scrollEnd")}}}},_resize:function(){var t=this;clearTimeout(this.resizeTimeout),this.resizeTimeout=setTimeout(function(){t.refresh()},this.options.resizePolling)},resetPosition:function(t){var e=this.x,i=this.y;return t=t||0,!this.hasHorizontalScroll||0<this.x?e=0:this.x<this.maxScrollX&&(e=this.maxScrollX),!this.hasVerticalScroll||0<this.y?i=0:this.y<this.maxScrollY&&(i=this.maxScrollY),(e!=this.x||i!=this.y)&&(this.scrollTo(e,i,t,this.options.bounceEasing),!0)},disable:function(){this.enabled=!1},enable:function(){this.enabled=!0},refresh:function(){this.wrapper.offsetHeight,this.wrapperWidth=this.wrapper.clientWidth,this.wrapperHeight=this.wrapper.clientHeight,this.scrollerWidth=this.scroller.offsetWidth,this.scrollerHeight=this.scroller.offsetHeight,this.maxScrollX=this.wrapperWidth-this.scrollerWidth,this.maxScrollY=this.wrapperHeight-this.scrollerHeight,this.hasHorizontalScroll=this.options.scrollX&&this.maxScrollX<0,this.hasVerticalScroll=this.options.scrollY&&this.maxScrollY<0,this.hasHorizontalScroll||(this.maxScrollX=0,this.scrollerWidth=this.wrapperWidth),this.hasVerticalScroll||(this.maxScrollY=0,this.scrollerHeight=this.wrapperHeight),this.endTime=0,this.directionX=0,this.directionY=0,this.wrapperOffset=g.offset(this.wrapper),this._execEvent("refresh"),this.resetPosition()},on:function(t,e){this._events[t]||(this._events[t]=[]),this._events[t].push(e)},off:function(t,e){if(this._events[t]){var i=this._events[t].indexOf(e);-1<i&&this._events[t].splice(i,1)}},_execEvent:function(t){if(this._events[t]){var e=0,i=this._events[t].length;if(i)for(;e<i;e++)this._events[t][e].apply(this,[].slice.call(arguments,1))}},scrollBy:function(t,e,i,n){t=this.x+t,e=this.y+e,i=i||0,this.scrollTo(t,e,i,n)},scrollTo:function(t,e,i,n){n=n||g.ease.circular,this.isInTransition=this.options.useTransition&&0<i;var o=this.options.useTransition&&n.style;!i||o?(o&&(this._transitionTimingFunction(n.style),this._transitionTime(i)),this._translate(t,e)):this._animate(t,e,i,n.fn)},scrollToElement:function(t,e,i,n,o){if(t=t.nodeType?t:this.scroller.querySelector(t)){var s=g.offset(t);s.left-=this.wrapperOffset.left,s.top-=this.wrapperOffset.top,!0===i&&(i=u.round(t.offsetWidth/2-this.wrapper.offsetWidth/2)),!0===n&&(n=u.round(t.offsetHeight/2-this.wrapper.offsetHeight/2)),s.left-=i||0,s.top-=n||0,s.left=0<s.left?0:s.left<this.maxScrollX?this.maxScrollX:s.left,s.top=0<s.top?0:s.top<this.maxScrollY?this.maxScrollY:s.top,e=null==e||"auto"===e?u.max(u.abs(this.x-s.left),u.abs(this.y-s.top)):e,this.scrollTo(s.left,s.top,e,o)}},_transitionTime:function(t){if(this.options.useTransition){t=t||0;var e=g.style.transitionDuration;if(e){if(this.scrollerStyle[e]=t+"ms",!t&&g.isBadAndroid){this.scrollerStyle[e]="0.0001ms";var i=this;f(function(){"0.0001ms"===i.scrollerStyle[e]&&(i.scrollerStyle[e]="0s")})}if(this.indicators)for(var n=this.indicators.length;n--;)this.indicators[n].transitionTime(t)}}},_transitionTimingFunction:function(t){if(this.scrollerStyle[g.style.transitionTimingFunction]=t,this.indicators)for(var e=this.indicators.length;e--;)this.indicators[e].transitionTimingFunction(t)},_translate:function(t,e){if(this.options.useTransform?this.scrollerStyle[g.style.transform]="translate("+t+"px,"+e+"px)"+this.translateZ:(t=u.round(t),e=u.round(e),this.scrollerStyle.left=t+"px",this.scrollerStyle.top=e+"px"),this.x=t,this.y=e,this.indicators)for(var i=this.indicators.length;i--;)this.indicators[i].updatePosition()},_initEvents:function(t){var e=t?g.removeEvent:g.addEvent,i=this.options.bindToWrapper?this.wrapper:r;e(r,"orientationchange",this),e(r,"resize",this),this.options.click&&e(this.wrapper,"click",this,!0),this.options.disableMouse||(e(this.wrapper,"mousedown",this),e(i,"mousemove",this),e(i,"mousecancel",this),e(i,"mouseup",this)),g.hasPointer&&!this.options.disablePointer&&(e(this.wrapper,g.prefixPointerEvent("pointerdown"),this),e(i,g.prefixPointerEvent("pointermove"),this),e(i,g.prefixPointerEvent("pointercancel"),this),e(i,g.prefixPointerEvent("pointerup"),this)),g.hasTouch&&!this.options.disableTouch&&(e(this.wrapper,"touchstart",this),e(i,"touchmove",this),e(i,"touchcancel",this),e(i,"touchend",this)),e(this.scroller,"transitionend",this),e(this.scroller,"webkitTransitionEnd",this),e(this.scroller,"oTransitionEnd",this),e(this.scroller,"MSTransitionEnd",this)},getComputedPosition:function(){var t,e,i=r.getComputedStyle(this.scroller,null);return e=this.options.useTransform?(t=+((i=i[g.style.transform].split(")")[0].split(", "))[12]||i[4]),+(i[13]||i[5])):(t=+i.left.replace(/[^-\d.]/g,""),+i.top.replace(/[^-\d.]/g,"")),{x:t,y:e}},_initIndicators:function(){var t,e=this.options.interactiveScrollbars,i="string"!=typeof this.options.scrollbars,n=[],o=this;this.indicators=[],this.options.scrollbars&&(this.options.scrollY&&(t={el:a("v",e,this.options.scrollbars),interactive:e,defaultScrollbars:!0,customStyle:i,resize:this.options.resizeScrollbars,shrink:this.options.shrinkScrollbars,fade:this.options.fadeScrollbars,listenX:!1},this.wrapper.appendChild(t.el),n.push(t)),this.options.scrollX&&(t={el:a("h",e,this.options.scrollbars),interactive:e,defaultScrollbars:!0,customStyle:i,resize:this.options.resizeScrollbars,shrink:this.options.shrinkScrollbars,fade:this.options.fadeScrollbars,listenY:!1},this.wrapper.appendChild(t.el),n.push(t))),this.options.indicators&&(n=n.concat(this.options.indicators));for(var s=n.length;s--;)this.indicators.push(new l(this,n[s]));function r(t){if(o.indicators)for(var e=o.indicators.length;e--;)t.call(o.indicators[e])}this.options.fadeScrollbars&&(this.on("scrollEnd",function(){r(function(){this.fade()})}),this.on("scrollCancel",function(){r(function(){this.fade()})}),this.on("scrollStart",function(){r(function(){this.fade(1)})}),this.on("beforeScrollStart",function(){r(function(){this.fade(1,!0)})})),this.on("refresh",function(){r(function(){this.refresh()})}),this.on("destroy",function(){r(function(){this.destroy()}),delete this.indicators})},_initWheel:function(){g.addEvent(this.wrapper,"wheel",this),g.addEvent(this.wrapper,"mousewheel",this),g.addEvent(this.wrapper,"DOMMouseScroll",this),this.on("destroy",function(){clearTimeout(this.wheelTimeout),this.wheelTimeout=null,g.removeEvent(this.wrapper,"wheel",this),g.removeEvent(this.wrapper,"mousewheel",this),g.removeEvent(this.wrapper,"DOMMouseScroll",this)})},_wheel:function(t){if(this.enabled){r.navigator.userAgent.match(/(MSIE|Trident)/)||t.preventDefault();var e,i,n,o,s=this;if(void 0===this.wheelTimeout&&s._execEvent("scrollStart"),clearTimeout(this.wheelTimeout),this.wheelTimeout=setTimeout(function(){s.options.snap||s._execEvent("scrollEnd"),s.wheelTimeout=void 0},400),"deltaX"in t)i=1===t.deltaMode?(e=-t.deltaX*this.options.mouseWheelSpeed,-t.deltaY*this.options.mouseWheelSpeed):(e=-t.deltaX,-t.deltaY);else if("wheelDeltaX"in t)e=t.wheelDeltaX/120*this.options.mouseWheelSpeed,i=t.wheelDeltaY/120*this.options.mouseWheelSpeed;else if("wheelDelta"in t)e=i=t.wheelDelta/120*this.options.mouseWheelSpeed;else{if(!("detail"in t))return;e=i=-t.detail/3*this.options.mouseWheelSpeed}if(e*=this.options.invertWheelDirection,i*=this.options.invertWheelDirection,this.hasVerticalScroll||(e=i,i=0),this.options.snap)return n=this.currentPage.pageX,o=this.currentPage.pageY,0<e?n--:e<0&&n++,0<i?o--:i<0&&o++,void this.goToPage(n,o);n=this.x+u.round(this.hasHorizontalScroll?e:0),o=this.y+u.round(this.hasVerticalScroll?i:0),this.directionX=0<e?-1:e<0?1:0,this.directionY=0<i?-1:i<0?1:0,0<n?n=0:n<this.maxScrollX&&(n=this.maxScrollX),0<o?o=0:o<this.maxScrollY&&(o=this.maxScrollY),this.scrollTo(n,o,0)}},_initSnap:function(){this.currentPage={},"string"==typeof this.options.snap&&(this.options.snap=this.scroller.querySelectorAll(this.options.snap)),this.on("refresh",function(){var t,e,i,n,o,s,r=0,a=0,l=0,c=this.options.snapStepX||this.wrapperWidth,h=this.options.snapStepY||this.wrapperHeight;if(this.pages=[],this.wrapperWidth&&this.wrapperHeight&&this.scrollerWidth&&this.scrollerHeight){if(!0===this.options.snap)for(i=u.round(c/2),n=u.round(h/2);l>-this.scrollerWidth;){for(this.pages[r]=[],o=t=0;o>-this.scrollerHeight;)this.pages[r][t]={x:u.max(l,this.maxScrollX),y:u.max(o,this.maxScrollY),width:c,height:h,cx:l-i,cy:o-n},o-=h,t++;l-=c,r++}else for(t=(s=this.options.snap).length,e=-1;r<t;r++)(0===r||s[r].offsetLeft<=s[r-1].offsetLeft)&&(a=0,e++),this.pages[a]||(this.pages[a]=[]),l=u.max(-s[r].offsetLeft,this.maxScrollX),o=u.max(-s[r].offsetTop,this.maxScrollY),i=l-u.round(s[r].offsetWidth/2),n=o-u.round(s[r].offsetHeight/2),this.pages[a][e]={x:l,y:o,width:s[r].offsetWidth,height:s[r].offsetHeight,cx:i,cy:n},l>this.maxScrollX&&a++;this.goToPage(this.currentPage.pageX||0,this.currentPage.pageY||0,0),this.options.snapThreshold%1==0?(this.snapThresholdX=this.options.snapThreshold,this.snapThresholdY=this.options.snapThreshold):(this.snapThresholdX=u.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width*this.options.snapThreshold),this.snapThresholdY=u.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height*this.options.snapThreshold))}}),this.on("flick",function(){var t=this.options.snapSpeed||u.max(u.max(u.min(u.abs(this.x-this.startX),1e3),u.min(u.abs(this.y-this.startY),1e3)),300);this.goToPage(this.currentPage.pageX+this.directionX,this.currentPage.pageY+this.directionY,t)})},_nearestSnap:function(t,e){if(!this.pages.length)return{x:0,y:0,pageX:0,pageY:0};var i=0,n=this.pages.length,o=0;if(u.abs(t-this.absStartX)<this.snapThresholdX&&u.abs(e-this.absStartY)<this.snapThresholdY)return this.currentPage;for(0<t?t=0:t<this.maxScrollX&&(t=this.maxScrollX),0<e?e=0:e<this.maxScrollY&&(e=this.maxScrollY);i<n;i++)if(t>=this.pages[i][0].cx){t=this.pages[i][0].x;break}for(n=this.pages[i].length;o<n;o++)if(e>=this.pages[0][o].cy){e=this.pages[0][o].y;break}return i==this.currentPage.pageX&&((i+=this.directionX)<0?i=0:i>=this.pages.length&&(i=this.pages.length-1),t=this.pages[i][0].x),o==this.currentPage.pageY&&((o+=this.directionY)<0?o=0:o>=this.pages[0].length&&(o=this.pages[0].length-1),e=this.pages[0][o].y),{x:t,y:e,pageX:i,pageY:o}},goToPage:function(t,e,i,n){n=n||this.options.bounceEasing,t>=this.pages.length?t=this.pages.length-1:t<0&&(t=0),e>=this.pages[t].length?e=this.pages[t].length-1:e<0&&(e=0);var o=this.pages[t][e].x,s=this.pages[t][e].y;i=void 0===i?this.options.snapSpeed||u.max(u.max(u.min(u.abs(o-this.x),1e3),u.min(u.abs(s-this.y),1e3)),300):i,this.currentPage={x:o,y:s,pageX:t,pageY:e},this.scrollTo(o,s,i,n)},next:function(t,e){var i=this.currentPage.pageX,n=this.currentPage.pageY;++i>=this.pages.length&&this.hasVerticalScroll&&(i=0,n++),this.goToPage(i,n,t,e)},prev:function(t,e){var i=this.currentPage.pageX,n=this.currentPage.pageY;--i<0&&this.hasVerticalScroll&&(i=0,n--),this.goToPage(i,n,t,e)},_initKeys:function(t){var e,i={pageUp:33,pageDown:34,end:35,home:36,left:37,up:38,right:39,down:40};if("object"==typeof this.options.keyBindings)for(e in this.options.keyBindings)"string"==typeof this.options.keyBindings[e]&&(this.options.keyBindings[e]=this.options.keyBindings[e].toUpperCase().charCodeAt(0));else this.options.keyBindings={};for(e in i)this.options.keyBindings[e]=this.options.keyBindings[e]||i[e];g.addEvent(r,"keydown",this),this.on("destroy",function(){g.removeEvent(r,"keydown",this)})},_key:function(t){if(this.enabled){var e,i=this.options.snap,n=i?this.currentPage.pageX:this.x,o=i?this.currentPage.pageY:this.y,s=g.getTime(),r=this.keyTime||0;switch(this.options.useTransition&&this.isInTransition&&(e=this.getComputedPosition(),this._translate(u.round(e.x),u.round(e.y)),this.isInTransition=!1),this.keyAcceleration=s-r<200?u.min(this.keyAcceleration+.25,50):0,t.keyCode){case this.options.keyBindings.pageUp:this.hasHorizontalScroll&&!this.hasVerticalScroll?n+=i?1:this.wrapperWidth:o+=i?1:this.wrapperHeight;break;case this.options.keyBindings.pageDown:this.hasHorizontalScroll&&!this.hasVerticalScroll?n-=i?1:this.wrapperWidth:o-=i?1:this.wrapperHeight;break;case this.options.keyBindings.end:n=i?this.pages.length-1:this.maxScrollX,o=i?this.pages[0].length-1:this.maxScrollY;break;case this.options.keyBindings.home:o=n=0;break;case this.options.keyBindings.left:n+=i?-1:5+this.keyAcceleration>>0;break;case this.options.keyBindings.up:o+=i?1:5+this.keyAcceleration>>0;break;case this.options.keyBindings.right:n-=i?-1:5+this.keyAcceleration>>0;break;case this.options.keyBindings.down:o-=i?1:5+this.keyAcceleration>>0;break;default:return}i?this.goToPage(n,o):(0<n?(n=0,this.keyAcceleration=0):n<this.maxScrollX&&(n=this.maxScrollX,this.keyAcceleration=0),0<o?(o=0,this.keyAcceleration=0):o<this.maxScrollY&&(o=this.maxScrollY,this.keyAcceleration=0),this.scrollTo(n,o,0),this.keyTime=s)}},_animate:function(s,r,a,l){var c=this,h=this.x,u=this.y,d=g.getTime(),p=d+a;this.isAnimating=!0,function t(){var e,i,n,o=g.getTime();if(p<=o)return c.isAnimating=!1,c._translate(s,r),void(c.resetPosition(c.options.bounceTime)||c._execEvent("scrollEnd"));n=l(o=(o-d)/a),e=(s-h)*n+h,i=(r-u)*n+u,c._translate(e,i),c.isAnimating&&f(t)}()},handleEvent:function(t){switch(t.type){case"touchstart":case"pointerdown":case"MSPointerDown":case"mousedown":this._start(t);break;case"touchmove":case"pointermove":case"MSPointerMove":case"mousemove":this._move(t);break;case"touchend":case"pointerup":case"MSPointerUp":case"mouseup":case"touchcancel":case"pointercancel":case"MSPointerCancel":case"mousecancel":this._end(t);break;case"orientationchange":case"resize":this._resize();break;case"transitionend":case"webkitTransitionEnd":case"oTransitionEnd":case"MSTransitionEnd":this._transitionEnd(t);break;case"wheel":case"DOMMouseScroll":case"mousewheel":this._wheel(t);break;case"keydown":this._key(t);break;case"click":this.enabled&&!t._constructed&&(t.preventDefault(),t.stopPropagation())}}},l.prototype={handleEvent:function(t){switch(t.type){case"touchstart":case"pointerdown":case"MSPointerDown":case"mousedown":this._start(t);break;case"touchmove":case"pointermove":case"MSPointerMove":case"mousemove":this._move(t);break;case"touchend":case"pointerup":case"MSPointerUp":case"mouseup":case"touchcancel":case"pointercancel":case"MSPointerCancel":case"mousecancel":this._end(t)}},destroy:function(){this.options.fadeScrollbars&&(clearTimeout(this.fadeTimeout),this.fadeTimeout=null),this.options.interactive&&(g.removeEvent(this.indicator,"touchstart",this),g.removeEvent(this.indicator,g.prefixPointerEvent("pointerdown"),this),g.removeEvent(this.indicator,"mousedown",this),g.removeEvent(r,"touchmove",this),g.removeEvent(r,g.prefixPointerEvent("pointermove"),this),g.removeEvent(r,"mousemove",this),g.removeEvent(r,"touchend",this),g.removeEvent(r,g.prefixPointerEvent("pointerup"),this),g.removeEvent(r,"mouseup",this)),this.options.defaultScrollbars&&this.wrapper.parentNode.removeChild(this.wrapper)},_start:function(t){var e=t.touches?t.touches[0]:t;t.preventDefault(),t.stopPropagation(),this.transitionTime(),this.initiated=!0,this.moved=!1,this.lastPointX=e.pageX,this.lastPointY=e.pageY,this.startTime=g.getTime(),this.options.disableTouch||g.addEvent(r,"touchmove",this),this.options.disablePointer||g.addEvent(r,g.prefixPointerEvent("pointermove"),this),this.options.disableMouse||g.addEvent(r,"mousemove",this),this.scroller._execEvent("beforeScrollStart")},_move:function(t){var e,i,n,o,s=t.touches?t.touches[0]:t;g.getTime(),this.moved||this.scroller._execEvent("scrollStart"),this.moved=!0,e=s.pageX-this.lastPointX,this.lastPointX=s.pageX,i=s.pageY-this.lastPointY,this.lastPointY=s.pageY,n=this.x+e,o=this.y+i,this._pos(n,o),t.preventDefault(),t.stopPropagation()},_end:function(t){if(this.initiated){if(this.initiated=!1,t.preventDefault(),t.stopPropagation(),g.removeEvent(r,"touchmove",this),g.removeEvent(r,g.prefixPointerEvent("pointermove"),this),g.removeEvent(r,"mousemove",this),this.scroller.options.snap){var e=this.scroller._nearestSnap(this.scroller.x,this.scroller.y),i=this.options.snapSpeed||u.max(u.max(u.min(u.abs(this.scroller.x-e.x),1e3),u.min(u.abs(this.scroller.y-e.y),1e3)),300);this.scroller.x==e.x&&this.scroller.y==e.y||(this.scroller.directionX=0,this.scroller.directionY=0,this.scroller.currentPage=e,this.scroller.scrollTo(e.x,e.y,i,this.scroller.options.bounceEasing))}this.moved&&this.scroller._execEvent("scrollEnd")}},transitionTime:function(t){t=t||0;var e=g.style.transitionDuration;if(e&&(this.indicatorStyle[e]=t+"ms",!t&&g.isBadAndroid)){this.indicatorStyle[e]="0.0001ms";var i=this;f(function(){"0.0001ms"===i.indicatorStyle[e]&&(i.indicatorStyle[e]="0s")})}},transitionTimingFunction:function(t){this.indicatorStyle[g.style.transitionTimingFunction]=t},refresh:function(){this.transitionTime(),this.options.listenX&&!this.options.listenY?this.indicatorStyle.display=this.scroller.hasHorizontalScroll?"block":"none":this.options.listenY&&!this.options.listenX?this.indicatorStyle.display=this.scroller.hasVerticalScroll?"block":"none":this.indicatorStyle.display=this.scroller.hasHorizontalScroll||this.scroller.hasVerticalScroll?"block":"none",this.scroller.hasHorizontalScroll&&this.scroller.hasVerticalScroll?(g.addClass(this.wrapper,"iScrollBothScrollbars"),g.removeClass(this.wrapper,"iScrollLoneScrollbar"),this.options.defaultScrollbars&&this.options.customStyle&&(this.options.listenX?this.wrapper.style.right="8px":this.wrapper.style.bottom="8px")):(g.removeClass(this.wrapper,"iScrollBothScrollbars"),g.addClass(this.wrapper,"iScrollLoneScrollbar"),this.options.defaultScrollbars&&this.options.customStyle&&(this.options.listenX?this.wrapper.style.right="2px":this.wrapper.style.bottom="2px")),this.wrapper.offsetHeight,this.options.listenX&&(this.wrapperWidth=this.wrapper.clientWidth,this.options.resize?(this.indicatorWidth=u.max(u.round(this.wrapperWidth*this.wrapperWidth/(this.scroller.scrollerWidth||this.wrapperWidth||1)),8),this.indicatorStyle.width=this.indicatorWidth+"px"):this.indicatorWidth=this.indicator.clientWidth,this.maxPosX=this.wrapperWidth-this.indicatorWidth,"clip"==this.options.shrink?(this.minBoundaryX=8-this.indicatorWidth,this.maxBoundaryX=this.wrapperWidth-8):(this.minBoundaryX=0,this.maxBoundaryX=this.maxPosX),this.sizeRatioX=this.options.speedRatioX||this.scroller.maxScrollX&&this.maxPosX/this.scroller.maxScrollX),this.options.listenY&&(this.wrapperHeight=this.wrapper.clientHeight,this.options.resize?(this.indicatorHeight=u.max(u.round(this.wrapperHeight*this.wrapperHeight/(this.scroller.scrollerHeight||this.wrapperHeight||1)),8),this.indicatorStyle.height=this.indicatorHeight+"px"):this.indicatorHeight=this.indicator.clientHeight,this.maxPosY=this.wrapperHeight-this.indicatorHeight,"clip"==this.options.shrink?(this.minBoundaryY=8-this.indicatorHeight,this.maxBoundaryY=this.wrapperHeight-8):(this.minBoundaryY=0,this.maxBoundaryY=this.maxPosY),this.maxPosY=this.wrapperHeight-this.indicatorHeight,this.sizeRatioY=this.options.speedRatioY||this.scroller.maxScrollY&&this.maxPosY/this.scroller.maxScrollY),this.updatePosition()},updatePosition:function(){var t=this.options.listenX&&u.round(this.sizeRatioX*this.scroller.x)||0,e=this.options.listenY&&u.round(this.sizeRatioY*this.scroller.y)||0;this.options.ignoreBoundaries||(t<this.minBoundaryX?("scale"==this.options.shrink&&(this.width=u.max(this.indicatorWidth+t,8),this.indicatorStyle.width=this.width+"px"),t=this.minBoundaryX):t>this.maxBoundaryX?t="scale"==this.options.shrink?(this.width=u.max(this.indicatorWidth-(t-this.maxPosX),8),this.indicatorStyle.width=this.width+"px",this.maxPosX+this.indicatorWidth-this.width):this.maxBoundaryX:"scale"==this.options.shrink&&this.width!=this.indicatorWidth&&(this.width=this.indicatorWidth,this.indicatorStyle.width=this.width+"px"),e<this.minBoundaryY?("scale"==this.options.shrink&&(this.height=u.max(this.indicatorHeight+3*e,8),this.indicatorStyle.height=this.height+"px"),e=this.minBoundaryY):e>this.maxBoundaryY?e="scale"==this.options.shrink?(this.height=u.max(this.indicatorHeight-3*(e-this.maxPosY),8),this.indicatorStyle.height=this.height+"px",this.maxPosY+this.indicatorHeight-this.height):this.maxBoundaryY:"scale"==this.options.shrink&&this.height!=this.indicatorHeight&&(this.height=this.indicatorHeight,this.indicatorStyle.height=this.height+"px")),this.x=t,this.y=e,this.scroller.options.useTransform?this.indicatorStyle[g.style.transform]="translate("+t+"px,"+e+"px)"+this.scroller.translateZ:(this.indicatorStyle.left=t+"px",this.indicatorStyle.top=e+"px")},_pos:function(t,e){t<0?t=0:t>this.maxPosX&&(t=this.maxPosX),e<0?e=0:e>this.maxPosY&&(e=this.maxPosY),t=this.options.listenX?u.round(t/this.sizeRatioX):this.scroller.x,e=this.options.listenY?u.round(e/this.sizeRatioY):this.scroller.y,this.scroller.scrollTo(t,e)},fade:function(t,e){if(!e||this.visible){clearTimeout(this.fadeTimeout),this.fadeTimeout=null;var i=t?250:500,n=t?0:300;t=t?"1":"0",this.wrapperStyle[g.style.transitionDuration]=i+"ms",this.fadeTimeout=setTimeout(function(t){this.wrapperStyle.opacity=t,this.visible=+t}.bind(this,t),n)}}},t.utils=g,"undefined"!=typeof module&&module.exports?module.exports=t:"function"==typeof define&&define.amd?(define(function(){return t}),void 0!==r&&(r.IScroll=t)):r.IScroll=t}(window,document,Math),function(l,c){l.fp_scrolloverflow=function(){l.IScroll||(l.IScroll=module.exports);var i="fp-scrollable",s="."+i,u=".fp-section",n=u+".active",d=".fp-tableCell";function o(){var h=this;function i(){var e;fp_utils.hasClass(c.body,"fp-responsive")?(e=h.options.scrollOverflowHandler,n(function(t){fp_utils.hasClass(fp_utils.closest(t,u),"fp-auto-height-responsive")&&e.remove(t)})):n(t)}function t(t){if(!fp_utils.hasClass(t,"fp-noscroll")){fp_utils.css(t,{overflow:"hidden"});var e,i,n=h.options.scrollOverflowHandler,o=n.wrapContent(),s=fp_utils.closest(t,u),r=n.scrollable(t),a=null!=(i=fp_utils.closest(s,u))?parseInt(getComputedStyle(i)["padding-bottom"])+parseInt(getComputedStyle(i)["padding-top"]):0;null!=r?e=n.scrollHeight(t):(e=t.scrollHeight,h.options.verticalCentered&&(e=p(d,t)[0].scrollHeight));var l=fp_utils.getWindowHeight(),c=l-a;l<e+a?null!=r?n.update(t,c):(h.options.verticalCentered?(fp_utils.wrapInner(p(d,t)[0],o.scroller),fp_utils.wrapInner(p(d,t)[0],o.scrollable)):(fp_utils.wrapInner(t,o.scroller),fp_utils.wrapInner(t,o.scrollable)),n.create(t,c,h.iscrollOptions)):n.remove(t),fp_utils.css(t,{overflow:""})}}function n(i){p(u).forEach(function(t){var e=p(".fp-slide",t);e.length?e.forEach(function(t){i(t)}):i(t)})}h.options=null,h.init=function(t,e){return h.options=t,h.iscrollOptions=e,"complete"===c.readyState&&(i(),fullpage_api.shared.afterRenderActions()),l.addEventListener("load",function(){i(),fullpage_api.shared.afterRenderActions()}),h},h.createScrollBarForAll=i,h.createScrollBar=t}IScroll.prototype.wheelOn=function(){this.wrapper.addEventListener("wheel",this),this.wrapper.addEventListener("mousewheel",this),this.wrapper.addEventListener("DOMMouseScroll",this)},IScroll.prototype.wheelOff=function(){this.wrapper.removeEventListener("wheel",this),this.wrapper.removeEventListener("mousewheel",this),this.wrapper.removeEventListener("DOMMouseScroll",this)};var p=null,r=null,a={refreshId:null,iScrollInstances:[],lastScrollY:null,hasBeenInit:!1,iscrollOptions:{scrollbars:!0,mouseWheel:!0,hideScrollbars:!1,fadeScrollbars:!1,disableMouse:!0,interactiveScrollbars:!0},init:function(t){p=fp_utils.$,r=t;var e="ontouchstart"in l||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints;return a.iscrollOptions.click=e,a.hasBeenInit=!0,a.iscrollOptions=fp_utils.deepExtend(a.iscrollOptions,t.scrollOverflowOptions),(new o).init(t,a.iscrollOptions)},toggleWheel:function(i){p(s,p(n)[0]).forEach(function(t){var e=t.fp_iscrollInstance;null!=e&&(i?e.wheelOn():e.wheelOff())})},setIscroll:function(t,e){if(a.hasBeenInit){var i=fp_utils.closest(t,s)||p(s,t)[0],n=e?"enable":"disable";i&&i.fp_iscrollInstance[n]()}},onLeave:function(){a.toggleWheel(!1)},beforeLeave:function(){a.onLeave()},afterLoad:function(){a.toggleWheel(!0)},create:function(i,n,o){p(s,i).forEach(function(t){fp_utils.css(t,{height:n+"px"});var e=t.fp_iscrollInstance;null!=e&&a.iScrollInstances.forEach(function(t){t.destroy()}),e=new IScroll(t,o),a.iScrollInstances.push(e),fp_utils.hasClass(fp_utils.closest(i,u),"active")||e.wheelOff(),t.fp_iscrollInstance=e})},isScrolled:function(t,e){var i=e.fp_iscrollInstance;return!i||("top"===t?0<=i.y&&!fp_utils.getScrollTop(e):"bottom"===t?0-i.y+fp_utils.getScrollTop(e)+e.offsetHeight>=e.scrollHeight:void 0)},scrollable:function(t){return p(".fp-slides",t).length?p(s,p(".fp-slide.active",t)[0])[0]:p(s,t)[0]},scrollHeight:function(t){return p(".fp-scroller",p(s,t)[0])[0].scrollHeight},remove:function(t){if(null!=t){var e=p(s,t)[0];if(null!=e){var i=e.fp_iscrollInstance;null!=i&&i.destroy(),e.fp_iscrollInstance=null,fp_utils.unwrap(p(".fp-scroller",t)[0]),fp_utils.unwrap(p(s,t)[0])}}},update:function(t,e){clearTimeout(a.refreshId),a.refreshId=setTimeout(function(){a.iScrollInstances.forEach(function(t){t.refresh(),fullpage_api.silentMoveTo(fp_utils.index(p(n)[0])+1)})},150),fp_utils.css(p(s,t)[0],{height:e+"px"}),r.verticalCentered&&fp_utils.css(p(s,t)[0].parentNode,{height:e+"px"})},wrapContent:function(){var t=c.createElement("div");t.className=i;var e=c.createElement("div");return e.className="fp-scroller",{scrollable:t,scroller:e}}};return{iscrollHandler:a}}()}(window,document),function(t,e,i,n){"function"==typeof define&&define.amd?define(function(){return t.fullpage=n(e,i),t.fullpage}):"object"==typeof exports?module.exports=n(e,i):e.fullpage=n(e,i)}(this,window,document,function(He,Xe){"use strict";var Ye="fullpage-wrapper",ze="."+Ye,_e="fp-responsive",Oe="fp-notransition",Be="fp-destroyed",De="fp-enabled",Fe="fp-viewing",Re="active",We="."+Re,je="fp-completely",Ne="fp-section",qe="."+Ne,Ve=qe+We,Ue="fp-tableCell",Ke="."+Ue,Ze="#fp-nav",Qe="fp-slide",Ge="."+Qe,Je=Ge+We,ti="fp-slides",ei="."+ti,ii="fp-slidesContainer",ni="."+ii,oi="fp-table",si="fp-slidesNav",ri="."+si,ai=ri+" a",li=".fp-controlArrow",ci=li+".fp-prev",hi=li+".fp-next";function ui(t,e){He.console&&He.console[t]&&He.console[t]("fullPage: "+e)}function di(t,e){return(e=1<arguments.length?e:Xe)?e.querySelectorAll(t):null}function pi(t){t=t||{};for(var e=1,i=arguments.length;e<i;++e){var n=arguments[e];if(n)for(var o in n)n.hasOwnProperty(o)&&("[object Object]"!==Object.prototype.toString.call(n[o])?t[o]=n[o]:t[o]=pi(t[o],n[o]))}return t}function fi(t,e){return null!=t&&(t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className))}function gi(){return"innerHeight"in He?He.innerHeight:Xe.documentElement.offsetHeight}function vi(){return He.innerWidth}function mi(t,e){var i;for(i in t=r(t),e)if(e.hasOwnProperty(i)&&null!==i)for(var n=0;n<t.length;n++)t[n].style[i]=e[i];return t}function i(t,e,i){for(var n=t[i];n&&!Di(n,e);)n=n[i];return n}function bi(t,e){return i(t,e,"previousElementSibling")}function yi(t,e){return i(t,e,"nextElementSibling")}function xi(t){return t.previousElementSibling}function wi(t){return t.nextElementSibling}function Si(t){return t[t.length-1]}function Ti(t,e){t=s(t)?t[0]:t;for(var i=null!=e?di(e,t.parentNode):t.parentNode.childNodes,n=0,o=0;o<i.length;o++){if(i[o]==t)return n;1==i[o].nodeType&&n++}return-1}function r(t){return s(t)?t:[t]}function Ei(t){t=r(t);for(var e=0;e<t.length;e++)t[e].style.display="none";return t}function Pi(t){t=r(t);for(var e=0;e<t.length;e++)t[e].style.display="block";return t}function s(t){return"[object Array]"===Object.prototype.toString.call(t)||"[object NodeList]"===Object.prototype.toString.call(t)}function Ci(t,e){t=r(t);for(var i=0;i<t.length;i++){var n=t[i];n.classList?n.classList.add(e):n.className+=" "+e}return t}function $i(t,e){t=r(t);for(var i=e.split(" "),n=0;n<i.length;n++){e=i[n];for(var o=0;o<t.length;o++){var s=t[o];s.classList?s.classList.remove(e):s.className=s.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}}return t}function ki(t,e){e.appendChild(t)}function n(t,e,i){var n;e=e||Xe.createElement("div");for(var o=0;o<t.length;o++){var s=t[o];(!i||o)&&i||(n=e.cloneNode(!0),s.parentNode.insertBefore(n,s)),n.appendChild(s)}return t}function Li(t,e){n(t,e,!0)}function Ai(t,e){for("string"==typeof e&&(e=Ri(e)),t.appendChild(e);t.firstChild!==e;)e.appendChild(t.firstChild)}function Mi(t){for(var e=Xe.createDocumentFragment();t.firstChild;)e.appendChild(t.firstChild);t.parentNode.replaceChild(e,t)}function Ii(t,e){return t&&1===t.nodeType?Di(t,e)?t:Ii(t.parentNode,e):null}function Hi(t,e){o(t,t.nextSibling,e)}function Xi(t,e){o(t,t,e)}function o(t,e,i){s(i)||("string"==typeof i&&(i=Ri(i)),i=[i]);for(var n=0;n<i.length;n++)t.parentNode.insertBefore(i[n],e)}function Yi(){var t=Xe.documentElement;return(He.pageYOffset||t.scrollTop)-(t.clientTop||0)}function zi(e){return Array.prototype.filter.call(e.parentNode.children,function(t){return t!==e})}function _i(t){t.preventDefault?t.preventDefault():t.returnValue=!1}function Oi(t){if("function"==typeof t)return!0;var e=Object.prototype.toString(t);return"[object Function]"===e||"[object GeneratorFunction]"===e}function Bi(t,e,i){var n;i=void 0===i?{}:i,"function"==typeof He.CustomEvent?n=new CustomEvent(e,{detail:i}):(n=Xe.createEvent("CustomEvent")).initCustomEvent(e,!0,!0,i),t.dispatchEvent(n)}function Di(t,e){return(t.matches||t.matchesSelector||t.msMatchesSelector||t.mozMatchesSelector||t.webkitMatchesSelector||t.oMatchesSelector).call(t,e)}function Fi(t,e){if("boolean"==typeof e)for(var i=0;i<t.length;i++)t[i].style.display=e?"block":"none";return t}function Ri(t){var e=Xe.createElement("div");return e.innerHTML=t.trim(),e.firstChild}function Wi(t){t=r(t);for(var e=0;e<t.length;e++){var i=t[e];i&&i.parentElement&&i.parentNode.removeChild(i)}}function a(t,e,i){for(var n=t[i],o=[];n;)!Di(n,e)&&null!=e||o.push(n),n=n[i];return o}function ji(t,e){return a(t,e,"nextElementSibling")}function Ni(t,e){return a(t,e,"previousElementSibling")}return He.NodeList&&!NodeList.prototype.forEach&&(NodeList.prototype.forEach=function(t,e){e=e||He;for(var i=0;i<this.length;i++)t.call(e,this[i],i,this)}),He.fp_utils={$:di,deepExtend:pi,hasClass:fi,getWindowHeight:gi,css:mi,until:i,prevUntil:bi,nextUntil:yi,prev:xi,next:wi,last:Si,index:Ti,getList:r,hide:Ei,show:Pi,isArrayOrList:s,addClass:Ci,removeClass:$i,appendTo:ki,wrap:n,wrapAll:Li,wrapInner:Ai,unwrap:Mi,closest:Ii,after:Hi,before:Xi,insertBefore:o,getScrollTop:Yi,siblings:zi,preventDefault:_i,isFunction:Oi,trigger:Bi,matches:Di,toggle:Fi,createElementFromHTML:Ri,remove:Wi,filter:function(t,e){Array.prototype.filter.call(t,e)},untilAll:a,nextAll:ji,prevAll:Ni,showError:ui},function(t,w){var i=w&&new RegExp("([\\d\\w]{8}-){3}[\\d\\w]{8}|^(?=.*?[A-Y])(?=.*?[a-y])(?=.*?[0-8])(?=.*?[#?!@$%^&*-]).{8,}$").test(w.licenseKey)||-1<Xe.domain.indexOf("alvarotrigo.com"),o=di("html, body"),c=di("html")[0],S=di("body")[0];if(!fi(c,De)){var f={};w=pi({menu:!1,anchors:[],lockAnchors:!1,navigation:!1,navigationPosition:"right",navigationTooltips:[],showActiveTooltip:!1,slidesNavigation:!1,slidesNavPosition:"bottom",scrollBar:!1,hybrid:!1,css3:!0,scrollingSpeed:700,autoScrolling:!0,fitToSection:!0,fitToSectionDelay:1e3,easing:"easeInOutCubic",easingcss3:"ease",loopBottom:!1,loopTop:!1,loopHorizontal:!0,continuousVertical:!1,continuousHorizontal:!1,scrollHorizontally:!1,interlockedSlides:!1,dragAndMove:!1,offsetSections:!1,resetSliders:!1,fadingEffect:!1,normalScrollElements:null,scrollOverflow:!1,scrollOverflowReset:!1,scrollOverflowHandler:He.fp_scrolloverflow?He.fp_scrolloverflow.iscrollHandler:null,scrollOverflowOptions:null,touchSensitivity:5,touchWrapper:"string"==typeof t?di(t)[0]:t,bigSectionsDestination:null,keyboardScrolling:!0,animateAnchor:!0,recordHistory:!0,controlArrows:!0,controlArrowColor:"#fff",verticalCentered:!0,sectionsColor:[],paddingTop:0,paddingBottom:0,fixedElements:null,responsive:0,responsiveWidth:0,responsiveHeight:0,responsiveSlides:!1,parallax:!1,parallaxOptions:{type:"reveal",percentage:62,property:"translate"},cards:!1,cardsOptions:{perspective:100,fadeContent:!0,fadeBackground:!0},sectionSelector:".section",slideSelector:".slide",v2compatible:!1,afterLoad:null,onLeave:null,afterRender:null,afterResize:null,afterReBuild:null,afterSlideLoad:null,onSlideLeave:null,afterResponsive:null,lazyLoading:!0},w);var T,s,g,h,a=!1,n=navigator.userAgent.match(/(iPhone|iPod|iPad|Android|playbook|silk|BlackBerry|BB10|Windows Phone|Tizen|Bada|webOS|IEMobile|Opera Mini)/),r="ontouchstart"in He||0<navigator.msMaxTouchPoints||navigator.maxTouchPoints,u="string"==typeof t?di(t)[0]:t,E=gi(),l=vi(),v=!1,e=!0,P=!0,d=[],m={m:{up:!0,down:!0,left:!0,right:!0}};m.k=pi({},m.m);var p,b,y,x,C,$,k,L,A,M=He.PointerEvent?{down:"pointerdown",move:"pointermove"}:{down:"MSPointerDown",move:"MSPointerMove"},I={touchmove:"ontouchmove"in He?"touchmove":M.move,touchstart:"ontouchstart"in He?"touchstart":M.down},H='a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex="0"], [contenteditable]',X=!1;try{var Y=Object.defineProperty({},"passive",{get:function(){X=!0}});He.addEventListener("testPassive",null,Y),He.removeEventListener("testPassive",null,Y)}catch(t){}var z,_,O=pi({},w),B=!1,D=!0,F=["parallax","scrollOverflowReset","dragAndMove","offsetSections","fadingEffect","responsiveSlides","continuousHorizontal","interlockedSlides","scrollHorizontally","resetSliders","cards"];$e(),He.fp_easings=pi(He.fp_easings,{easeInOutCubic:function(t,e,i,n){return(t/=n/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e}}),u&&(f.version="3.0.8",f.setAutoScrolling=G,f.setRecordHistory=J,f.setScrollingSpeed=tt,f.setFitToSection=et,f.setLockAnchors=function(t){w.lockAnchors=t},f.setMouseWheelScrolling=it,f.setAllowScrolling=nt,f.setKeyboardScrolling=st,f.moveSectionUp=rt,f.moveSectionDown=at,f.silentMoveTo=lt,f.moveTo=ct,f.moveSlideRight=ht,f.moveSlideLeft=ut,f.fitToSection=Tt,f.reBuild=dt,f.setResponsive=ft,f.getFullpageData=function(){return w},f.destroy=function(t){G(!1,"internal"),nt(!0),ot(!1),st(!1),Ci(u,Be),[C,x,b,$,k,A,y].forEach(function(t){clearTimeout(t)}),He.removeEventListener("scroll",St),He.removeEventListener("hashchange",Ut),He.removeEventListener("resize",oe),Xe.removeEventListener("keydown",Zt),Xe.removeEventListener("keyup",Qt),["click","touchstart"].forEach(function(t){Xe.removeEventListener(t,gt)}),["mouseenter","touchstart","mouseleave","touchend"].forEach(function(t){Xe.removeEventListener(t,mt,!0)}),t&&(Te(0),di("img[data-src], source[data-src], audio[data-src], iframe[data-src]",u).forEach(function(t){Bt(t,"src")}),di("img[data-srcset]").forEach(function(t){Bt(t,"srcset")}),Wi(di(Ze+", "+ri+", "+li)),mi(di(qe),{height:"","background-color":"",padding:""}),mi(di(Ge),{width:""}),mi(u,{height:"",position:"","-ms-touch-action":"","touch-action":""}),mi(o,{overflow:"",height:""}),$i(c,De),$i(S,_e),S.className.split(/\s+/).forEach(function(t){0===t.indexOf(Fe)&&$i(S,t)}),di(qe+", "+Ge).forEach(function(t){w.scrollOverflowHandler&&w.scrollOverflow&&w.scrollOverflowHandler.remove(t),$i(t,oi+" "+Re+" "+je),t.getAttribute("data-fp-styles")&&t.setAttribute("style",t.getAttribute("data-fp-styles")),fi(t,Ne)&&!B&&t.removeAttribute("data-anchor")}),le(u),[Ke,ni,ei].forEach(function(t){di(t,u).forEach(function(t){Mi(t)})}),mi(u,{"-webkit-transition":"none",transition:"none"}),He.scrollTo(0,0),[Ne,Qe,ii].forEach(function(t){$i(di("."+t),t)}))},f.getActiveSection=function(){return new Me(di(Ve)[0])},f.getActiveSlide=function(){return zt(di(Je,di(Ve)[0])[0])},f.test={top:"0px",translate3d:"translate3d(0px, 0px, 0px)",translate3dH:function(){for(var t=[],e=0;e<di(w.sectionSelector,u).length;e++)t.push("translate3d(0px, 0px, 0px)");return t}(),left:function(){for(var t=[],e=0;e<di(w.sectionSelector,u).length;e++)t.push(0);return t}(),options:w,setAutoScrolling:G},f.shared={afterRenderActions:wt,isNormalScrollElement:!1},He.fullpage_api=f,w.$&&Object.keys(f).forEach(function(t){w.$.fn.fullpage[t]=f[t]}),w.css3&&(w.css3=function(){var t,e=Xe.createElement("p"),i={webkitTransform:"-webkit-transform",OTransform:"-o-transform",msTransform:"-ms-transform",MozTransform:"-moz-transform",transform:"transform"};for(var n in e.style.display="block",Xe.body.insertBefore(e,null),i)void 0!==e.style[n]&&(e.style[n]="translate3d(1px,1px,1px)",t=He.getComputedStyle(e).getPropertyValue(i[n]));return Xe.body.removeChild(e),void 0!==t&&0<t.length&&"none"!==t}()),w.scrollBar=w.scrollBar||w.hybrid,function(){if(!w.anchors.length){var t="[data-anchor]",e=di(w.sectionSelector.split(",").join(t+",")+t,u);e.length&&(B=!0,e.forEach(function(t){w.anchors.push(t.getAttribute("data-anchor").toString())}))}if(!w.navigationTooltips.length){var i="[data-tooltip]",n=di(w.sectionSelector.split(",").join(i+",")+i,u);n.length&&n.forEach(function(t){w.navigationTooltips.push(t.getAttribute("data-tooltip").toString())})}}(),function(){mi(u,{height:"100%",position:"relative"}),Ci(u,Ye),Ci(c,De),E=gi(),$i(u,Be),Ci(di(w.sectionSelector,u),Ne),Ci(di(w.slideSelector,u),Qe);for(var t=di(qe),e=0;e<t.length;e++){var i=e,n=t[e],o=di(Ge,n),s=o.length;n.setAttribute("data-fp-styles",n.getAttribute("style")),a=n,(l=i)||null!=di(Ve)[0]||Ci(a,Re),h=di(Ve)[0],mi(a,{height:E+"px"}),w.paddingTop&&mi(a,{"padding-top":w.paddingTop}),w.paddingBottom&&mi(a,{"padding-bottom":w.paddingBottom}),void 0!==w.sectionsColor[l]&&mi(a,{"background-color":w.sectionsColor[l]}),void 0!==w.anchors[l]&&a.setAttribute("data-anchor",w.anchors[l]),r=i,void 0!==w.anchors[r]&&fi(n,Re)&&ce(w.anchors[r],r),w.menu&&w.css3&&null!=Ii(di(w.menu)[0],ze)&&di(w.menu).forEach(function(t){S.appendChild(t)}),0<s?yt(n,o,s):w.verticalCentered&&ue(n)}var r,a,l;w.fixedElements&&w.css3&&di(w.fixedElements).forEach(function(t){S.appendChild(t)}),w.navigation&&function(){var t=Xe.createElement("div");t.setAttribute("id","fp-nav");var e=Xe.createElement("ul");t.appendChild(e),ki(t,S);var i=di(Ze)[0];Ci(i,"fp-"+w.navigationPosition),w.showActiveTooltip&&Ci(i,"fp-show-active");for(var n="",o=0;o<di(qe).length;o++){var s="";w.anchors.length&&(s=w.anchors[o]),n+='<li><a href="#'+s+'"><span class="fp-sr-only">'+xt(o,"Section")+"</span><span></span></a>";var r=w.navigationTooltips[o];void 0!==r&&""!==r&&(n+='<div class="fp-tooltip fp-'+w.navigationPosition+'">'+r+"</div>"),n+="</li>"}di("ul",i)[0].innerHTML=n,mi(di(Ze),{"margin-top":"-"+di(Ze)[0].offsetHeight/2+"px"}),Ci(di("a",di("li",di(Ze)[0])[Ti(di(Ve)[0],qe)]),Re)}(),di('iframe[src*="youtube.com/embed/"]',u).forEach(function(t){var e,i;i=(e=t).getAttribute("src"),e.setAttribute("src",i+(/\?/.test(i)?"&":"?")+"enablejsapi=1")}),w.scrollOverflow&&(p=w.scrollOverflowHandler.init(w))}(),nt(!0),ot(!0),G(w.autoScrolling,"internal"),re(),xe(),"complete"===Xe.readyState&&Vt(),He.addEventListener("load",Vt),w.scrollOverflow||wt(),function(){for(var t=1;t<4;t++)A=setTimeout(bt,350*t)}(),He.addEventListener("scroll",St),He.addEventListener("hashchange",Ut),He.addEventListener("blur",function(){g=e=!1}),He.addEventListener("resize",oe),Xe.addEventListener("keydown",Zt),Xe.addEventListener("keyup",Qt),["click","touchstart"].forEach(function(t){Xe.addEventListener(t,gt)}),w.normalScrollElements&&(["mouseenter","touchstart"].forEach(function(t){vt(t,!1)}),["mouseleave","touchend"].forEach(function(t){vt(t,!0)})));var R=!1,W=0,j=0,N=0,q=0,V=0,U=(new Date).getTime(),K=0,Z=0,Q=E;return f}function G(t,e){t||Te(0),Ce("autoScrolling",t,e);var i=di(Ve)[0];if(w.autoScrolling&&!w.scrollBar)mi(o,{overflow:"hidden",height:"100%"}),J(O.recordHistory,"internal"),mi(u,{"-ms-touch-action":"none","touch-action":"none"}),null!=i&&Te(i.offsetTop);else if(mi(o,{overflow:"visible",height:"initial"}),J(!!w.autoScrolling&&O.recordHistory,"internal"),mi(u,{"-ms-touch-action":"","touch-action":""}),null!=i){var n=_t(i.offsetTop);n.element.scrollTo(0,n.options)}}function J(t,e){Ce("recordHistory",t,e)}function tt(t,e){Ce("scrollingSpeed",t,e)}function et(t,e){Ce("fitToSection",t,e)}function it(t){t?(function(){var t,e="";He.addEventListener?t="addEventListener":(t="attachEvent",e="on");var i="onwheel"in Xe.createElement("div")?"wheel":void 0!==Xe.onmousewheel?"mousewheel":"DOMMouseScroll",n=!!X&&{passive:!1};"DOMMouseScroll"==i?Xe[t](e+"MozMousePixelScroll",At,n):Xe[t](e+i,At,n)}(),u.addEventListener("mousedown",Gt),u.addEventListener("mouseup",Jt)):(Xe.addEventListener?(Xe.removeEventListener("mousewheel",At,!1),Xe.removeEventListener("wheel",At,!1),Xe.removeEventListener("MozMousePixelScroll",At,!1)):Xe.detachEvent("onmousewheel",At),u.removeEventListener("mousedown",Gt),u.removeEventListener("mouseup",Jt))}function nt(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){Pe(e,t,"m")}):Pe(e,"all","m")}function ot(t){t?(it(!0),function(){if(n||r){w.autoScrolling&&(S.removeEventListener(I.touchmove,Pt,{passive:!1}),S.addEventListener(I.touchmove,Pt,{passive:!1}));var t=w.touchWrapper;t.removeEventListener(I.touchstart,kt),t.removeEventListener(I.touchmove,Ct,{passive:!1}),t.addEventListener(I.touchstart,kt),t.addEventListener(I.touchmove,Ct,{passive:!1})}}()):(it(!1),function(){if(n||r){w.autoScrolling&&(S.removeEventListener(I.touchmove,Ct,{passive:!1}),S.removeEventListener(I.touchmove,Pt,{passive:!1}));var t=w.touchWrapper;t.removeEventListener(I.touchstart,kt),t.removeEventListener(I.touchmove,Ct,{passive:!1})}}())}function st(e,t){void 0!==t?(t=t.replace(/ /g,"").split(",")).forEach(function(t){Pe(e,t,"k")}):(Pe(e,"all","k"),w.keyboardScrolling=e)}function rt(){var t=bi(di(Ve)[0],qe);t||!w.loopTop&&!w.continuousVertical||(t=Si(di(qe))),null!=t&&Ht(t,null,!0)}function at(){var t=yi(di(Ve)[0],qe);t||!w.loopBottom&&!w.continuousVertical||(t=di(qe)[0]),null!=t&&Ht(t,null,!1)}function lt(t,e){tt(0,"internal"),ct(t,e),tt(O.scrollingSpeed,"internal")}function ct(t,e){var i=fe(t);void 0!==e?ge(t,e):null!=i&&Ht(i)}function ht(t){Mt("right",t)}function ut(t){Mt("left",t)}function dt(t){if(!fi(u,Be)){v=!0,E=gi(),l=vi();for(var e=di(qe),i=0;i<e.length;++i){var n=e[i],o=di(ei,n)[0],s=di(Ge,n);w.verticalCentered&&mi(di(Ke,n),{height:de(n)+"px"}),mi(n,{height:E+"px"}),1<s.length&&ie(o,di(Je,o)[0])}w.scrollOverflow&&p.createScrollBarForAll();var r=Ti(di(Ve)[0],qe);r&&lt(r+1),v=!1,Oi(w.afterResize)&&t&&w.afterResize.call(u,He.innerWidth,He.innerHeight),Oi(w.afterReBuild)&&!t&&w.afterReBuild.call(u)}}function pt(){return fi(S,_e)}function ft(t){var e=pt();t?e||(G(!1,"internal"),et(!1,"internal"),Ei(di(Ze)),Ci(S,_e),Oi(w.afterResponsive)&&w.afterResponsive.call(u,t),w.scrollOverflow&&p.createScrollBarForAll()):e&&(G(O.autoScrolling,"internal"),et(O.autoScrolling,"internal"),Pi(di(Ze)),$i(S,_e),Oi(w.afterResponsive)&&w.afterResponsive.call(u,t))}function gt(t){var e=t.target;e&&Ii(e,Ze+" a")?function(t){_i(t);var e=Ti(Ii(this,Ze+" li"));Ht(di(qe)[e])}.call(e,t):Di(e,".fp-tooltip")?function(){Bi(xi(this),"click")}.call(e):Di(e,li)?function(){var t=Ii(this,qe);fi(this,"fp-prev")?m.m.left&&ut(t):m.m.right&&ht(t)}.call(e,t):Di(e,ai)||null!=Ii(e,ai)?function(t){_i(t);var e=di(ei,Ii(this,qe))[0];ie(e,di(Ge,e)[Ti(Ii(this,"li"))])}.call(e,t):Ii(e,w.menu+" [data-menuanchor]")&&function(t){!di(w.menu)[0]||!w.lockAnchors&&w.anchors.length||(_i(t),ct(this.getAttribute("data-menuanchor")))}.call(e,t)}function vt(t,e){Xe["fp_"+t]=e,Xe.addEventListener(t,mt,!0)}function mt(t){var e=t.type,n=!1,o=w.scrollOverflow,s="mouseleave"===e?t.toElement||t.relatedTarget:t.target;if(s==Xe||!s)return ot(!0),void(o&&w.scrollOverflowHandler.setIscroll(s,!0));"touchend"===e&&(D=!1,setTimeout(function(){D=!0},800)),"mouseenter"===e&&!D||(w.normalScrollElements.split(",").forEach(function(t){if(!n){var e=Di(s,t),i=Ii(s,t);(e||i)&&(f.shared.isNormalScrollElement||(ot(!1),o&&w.scrollOverflowHandler.setIscroll(s,!1)),f.shared.isNormalScrollElement=!0,n=!0)}}),!n&&f.shared.isNormalScrollElement&&(ot(!0),o&&w.scrollOverflowHandler.setIscroll(s,!0),f.shared.isNormalScrollElement=!1))}function bt(){var t=gi(),e=vi();E===t&&l===e||(E=t,l=e,dt(!0))}function yt(t,e,i){var n=100*i,o=100/i,s=Xe.createElement("div");s.className=ti,Li(e,s);var r,a,l=Xe.createElement("div");l.className=ii,Li(e,l),mi(di(ni,t),{width:n+"%"}),1<i&&(w.controlArrows&&(r=t,a=[Ri('<div class="fp-controlArrow fp-prev"></div>'),Ri('<div class="fp-controlArrow fp-next"></div>')],Hi(di(ei,r)[0],a),"#fff"!==w.controlArrowColor&&(mi(di(hi,r),{"border-color":"transparent transparent transparent "+w.controlArrowColor}),mi(di(ci,r),{"border-color":"transparent "+w.controlArrowColor+" transparent transparent"})),w.loopHorizontal||Ei(di(ci,r))),w.slidesNavigation&&function(t,e){ki(Ri('<div class="'+si+'"><ul></ul></div>'),t);var i=di(ri,t)[0];Ci(i,"fp-"+w.slidesNavPosition);for(var n=0;n<e;n++)ki(Ri('<li><a href="#"><span class="fp-sr-only">'+xt(n,"Slide")+"</span><span></span></a></li>"),di("ul",i)[0]);mi(i,{"margin-left":"-"+i.innerWidth/2+"px"}),Ci(di("a",di("li",i)[0]),Re)}(t,i)),e.forEach(function(t){mi(t,{width:o+"%"}),w.verticalCentered&&ue(t)});var c=di(Je,t)[0];null!=c&&(0!==Ti(di(Ve),qe)||0===Ti(di(Ve),qe)&&0!==Ti(c))?Se(c,"internal"):Ci(e[0],Re)}function xt(t,e){return w.navigationTooltips[t]||w.anchors[t]||e+" "+(t+1)}function wt(){var t,e,i=di(Ve)[0];Ci(i,je),Ft(i),Dt(),Wt(i),w.scrollOverflow&&w.scrollOverflowHandler.afterLoad(),e=fe((t=Kt()).section),t.section&&e&&(void 0===e||Ti(e)!==Ti(h))||!Oi(w.afterLoad)||Xt("afterLoad",{activeSection:i,element:i,direction:null,anchorLink:i.getAttribute("data-anchor"),sectionIndex:Ti(i,qe)}),Oi(w.afterRender)&&Xt("afterRender")}function St(){var t,e,i,n,o;if(!w.autoScrolling||w.scrollBar){var s=Yi(),r=(o=W<s?"down":"up",K=W=s,o),a=0,l=s+gi()/2,c=S.offsetHeight-gi()===s,h=di(qe);if(c)a=h.length-1;else if(s)for(var u=0;u<h.length;++u)h[u].offsetTop<=l&&(a=u);else a=0;if(e=r,n=(i=di(Ve)[0].offsetTop)+gi(),("up"!=e?i<=Yi():n>=Yi()+gi())&&(fi(di(Ve)[0],je)||(Ci(di(Ve)[0],je),$i(zi(di(Ve)[0]),je))),!fi(t=h[a],Re)){R=!0;var d,p,f=di(Ve)[0],g=Ti(f,qe)+1,v=he(t),m=t.getAttribute("data-anchor"),b=Ti(t,qe)+1,y=di(Je,t)[0],x={activeSection:f,sectionIndex:b-1,anchorLink:m,element:t,leavingSection:g,direction:v};y&&(p=y.getAttribute("data-anchor"),d=Ti(y)),P&&(Ci(t,Re),$i(zi(t),Re),Oi(w.onLeave)&&Xt("onLeave",x),Oi(w.afterLoad)&&Xt("afterLoad",x),Nt(f),Ft(t),Wt(t),ce(m,b-1),w.anchors.length&&(T=m),me(d,p,m)),clearTimeout($),$=setTimeout(function(){R=!1},100)}w.fitToSection&&(clearTimeout(k),k=setTimeout(function(){w.fitToSection&&di(Ve)[0].offsetHeight<=E&&Tt()},w.fitToSectionDelay))}}function Tt(){P&&(v=!0,Ht(di(Ve)[0]),v=!1)}function Et(t){if(m.m[t]){var e="down"===t?at:rt;if(w.scrollOverflow){var i=w.scrollOverflowHandler.scrollable(di(Ve)[0]),n="down"===t?"bottom":"top";if(null!=i){if(!w.scrollOverflowHandler.isScrolled(n,i))return 1;e()}else e()}else e()}}function Pt(t){w.autoScrolling&&$t(t)&&m.m.up&&_i(t)}function Ct(t){var e=Ii(t.target,qe)||di(Ve)[0];if($t(t)){w.autoScrolling&&_i(t);var i=we(t);q=i.y,V=i.x,di(ei,e).length&&Math.abs(N-V)>Math.abs(j-q)?!a&&Math.abs(N-V)>vi()/100*w.touchSensitivity&&(V<N?m.m.right&&ht(e):m.m.left&&ut(e)):w.autoScrolling&&P&&Math.abs(j-q)>He.innerHeight/100*w.touchSensitivity&&(q<j?Et("down"):j<q&&Et("up"))}}function $t(t){return void 0===t.pointerType||"mouse"!=t.pointerType}function kt(t){if(w.fitToSection&&(z=!1),$t(t)){var e=we(t);j=e.y,N=e.x}}function Lt(t,e){for(var i=0,n=t.slice(Math.max(t.length-e,1)),o=0;o<n.length;o++)i+=n[o];return Math.ceil(i/e)}function At(t){var e=(new Date).getTime(),i=fi(di(".fp-completely")[0],"fp-normal-scroll");if(!m.m.down&&!m.m.up)return _i(t),!1;if(w.autoScrolling&&!g&&!i){var n=(t=t||He.event).wheelDelta||-t.deltaY||-t.detail,o=Math.max(-1,Math.min(1,n)),s=void 0!==t.wheelDeltaX||void 0!==t.deltaX,r=Math.abs(t.wheelDeltaX)<Math.abs(t.wheelDelta)||Math.abs(t.deltaX)<Math.abs(t.deltaY)||!s;149<d.length&&d.shift(),d.push(Math.abs(n)),w.scrollBar&&_i(t);var a=e-U;if(U=e,200<a&&(d=[]),P){var l=Lt(d,10);Lt(d,70)<=l&&r&&Et(o<0?"down":"up")}return!1}w.fitToSection&&(z=!1)}function Mt(t,e){var i=null==e?di(Ve)[0]:e,n=di(ei,i)[0];if(!(null==n||a||di(Ge,n).length<2)){var o=di(Je,n)[0],s=null;if(null==(s=("left"===t?bi:yi)(o,Ge))){if(!w.loopHorizontal)return;var r=zi(o);s="left"===t?r[r.length-1]:r[0]}a=!f.test.isTesting,ie(n,s,t)}}function It(){for(var t=di(Je),e=0;e<t.length;e++)Se(t[e],"internal")}function Ht(t,e,i){if(null!=t){var n,o,s,r,a,l,c,h,u={element:t,callback:e,isMovementUp:i,dtop:(n=t.offsetHeight,o=t.offsetTop,r=K<(s=o),a=s-E+n,l=w.bigSectionsDestination,E<n?(r||l)&&"bottom"!==l||(s=a):(r||v&&null==wi(t))&&(s=a),K=s),yMovement:he(t),anchorLink:t.getAttribute("data-anchor"),sectionIndex:Ti(t,qe),activeSlide:di(Je,t)[0],activeSection:di(Ve)[0],leavingSection:Ti(di(Ve),qe)+1,localIsResizing:v};if(!(u.activeSection==t&&!v||w.scrollBar&&Yi()===u.dtop&&!fi(t,"fp-auto-height"))){if(null!=u.activeSlide&&(c=u.activeSlide.getAttribute("data-anchor"),h=Ti(u.activeSlide)),!u.localIsResizing){var d=u.yMovement;if(void 0!==i&&(d=i?"up":"down"),u.direction=d,Oi(w.onLeave)&&!1===Xt("onLeave",u))return}w.autoScrolling&&w.continuousVertical&&void 0!==u.isMovementUp&&(!u.isMovementUp&&"up"==u.yMovement||u.isMovementUp&&"down"==u.yMovement)&&((p=u).isMovementUp?Xi(di(Ve)[0],ji(p.activeSection,qe)):Hi(di(Ve)[0],Ni(p.activeSection,qe).reverse()),Te(di(Ve)[0].offsetTop),It(),p.wrapAroundElements=p.activeSection,p.dtop=p.element.offsetTop,p.yMovement=he(p.element),u=p),u.localIsResizing||Nt(u.activeSection),w.scrollOverflow&&w.scrollOverflowHandler.beforeLeave(),Ci(t,Re),$i(zi(t),Re),Ft(t),w.scrollOverflow&&w.scrollOverflowHandler.onLeave(),P=f.test.isTesting,me(h,c,u.anchorLink,u.sectionIndex),function(t){if(w.css3&&w.autoScrolling&&!w.scrollBar){pe("translate3d(0px, -"+Math.round(t.dtop)+"px, 0px)",!0),w.scrollingSpeed?(clearTimeout(x),x=setTimeout(function(){Ot(t)},w.scrollingSpeed)):Ot(t)}else{var e=_t(t.dtop);f.test.top=-t.dtop+"px",ke(e.element,e.options,w.scrollingSpeed,function(){w.scrollBar?setTimeout(function(){Ot(t)},30):Ot(t)})}}(u),T=u.anchorLink,ce(u.anchorLink,u.sectionIndex)}}var p}function Xt(t,e){var i,n,o,s=(n=e,(o=w.v2compatible?{afterRender:function(){return[u]},onLeave:function(){return[n.activeSection,n.leavingSection,n.sectionIndex+1,n.direction]},afterLoad:function(){return[n.element,n.anchorLink,n.sectionIndex+1]},afterSlideLoad:function(){return[n.destiny,n.anchorLink,n.sectionIndex+1,n.slideAnchor,n.slideIndex]},onSlideLeave:function(){return[n.prevSlide,n.anchorLink,n.sectionIndex+1,n.prevSlideIndex,n.direction,n.slideIndex]}}:{afterRender:function(){return{section:Yt(di(Ve)[0]),slide:zt(di(Je,di(Ve)[0])[0])}},onLeave:function(){return{origin:Yt(n.activeSection),destination:Yt(n.element),direction:n.direction}},afterLoad:function(){return o.onLeave()},afterSlideLoad:function(){return{section:Yt(n.section),origin:zt(n.prevSlide),destination:zt(n.destiny),direction:n.direction}},onSlideLeave:function(){return o.afterSlideLoad()}})[t]());if(w.v2compatible){if(!1===w[t].apply(s[0],s.slice(1)))return!1}else if(Bi(u,t,s),!1===w[t].apply(s[Object.keys(s)[0]],(i=s,Object.keys(i).map(function(t){return i[t]}))))return!1;return!0}function Yt(t){return t?new Me(t):null}function zt(t){return t?new Ie(t):null}function _t(t){var e={};return w.autoScrolling&&!w.scrollBar?(e.options=-t,e.element=di(ze)[0]):(e.options=t,e.element=He),e}function Ot(t){var e;null!=(e=t).wrapAroundElements&&(e.isMovementUp?Xi(di(qe)[0],e.wrapAroundElements):Hi(di(qe)[di(qe).length-1],e.wrapAroundElements),Te(di(Ve)[0].offsetTop),It()),Oi(w.afterLoad)&&!t.localIsResizing&&Xt("afterLoad",t),w.scrollOverflow&&w.scrollOverflowHandler.afterLoad(),t.localIsResizing||Wt(t.element),Ci(t.element,je),$i(zi(t.element),je),Dt(),P=!0,Oi(t.callback)&&t.callback()}function Bt(t,e){t.setAttribute(e,t.getAttribute("data-"+e)),t.removeAttribute("data-"+e)}function Dt(){var t=di(".fp-auto-height")[0]||pt()&&di(".fp-auto-height-responsive")[0];w.lazyLoading&&t&&di(qe+":not("+We+")").forEach(function(t){var e,i,n;i=(e=t.getBoundingClientRect()).top,n=e.bottom,(i+2<E&&0<i||2<n&&n<E)&&Ft(t)})}function Ft(n){w.lazyLoading&&di("img[data-src], img[data-srcset], source[data-src], source[data-srcset], video[data-src], audio[data-src], iframe[data-src]",qt(n)).forEach(function(i){if(["src","srcset"].forEach(function(t){var e=i.getAttribute("data-"+t);null!=e&&e&&(Bt(i,t),i.addEventListener("load",function(){Rt(n)}))}),Di(i,"source")){var t=Ii(i,"video, audio");t&&(t.load(),t.onloadeddata=function(){Rt(n)})}})}function Rt(t){w.scrollOverflow&&(clearTimeout(_),_=setTimeout(function(){p.createScrollBar(t)},200))}function Wt(t){var e=qt(t);di("video, audio",e).forEach(function(t){t.hasAttribute("data-autoplay")&&"function"==typeof t.play&&t.play()}),di('iframe[src*="youtube.com/embed/"]',e).forEach(function(t){t.hasAttribute("data-autoplay")&&jt(t),t.onload=function(){t.hasAttribute("data-autoplay")&&jt(t)}})}function jt(t){t.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*")}function Nt(t){var e=qt(t);di("video, audio",e).forEach(function(t){t.hasAttribute("data-keepplaying")||"function"!=typeof t.pause||t.pause()}),di('iframe[src*="youtube.com/embed/"]',e).forEach(function(t){/youtube\.com\/embed\//.test(t.getAttribute("src"))&&!t.hasAttribute("data-keepplaying")&&t.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")})}function qt(t){var e=di(Je,t);return e.length&&(t=e[0]),t}function Vt(){var t=Kt(),e=t.section,i=t.slide;e&&(w.animateAnchor?ge:lt)(e,i)}function Ut(){if(!R&&!w.lockAnchors){var t=Kt(),e=t.section,i=t.slide,n=void 0===T,o=void 0===T&&void 0===i&&!a;e&&e.length&&(e&&e!==T&&!n||o||!a&&s!=i)&&ge(e,i)}}function Kt(){var t,e,i=He.location.hash;if(i.length){var n=i.replace("#","").split("/"),o=-1<i.indexOf("#/");t=o?"/"+n[1]:decodeURIComponent(n[0]);var s=o?n[2]:n[1];s&&s.length&&(e=decodeURIComponent(s))}return{section:t,slide:e}}function Zt(t){clearTimeout(L);var e,i,n,o,s,r,a,l,c,h,u=Xe.activeElement,d=t.keyCode;function p(t){return _i(t),h[0]?h[0].focus():null}9===d?(l=(e=t).shiftKey,c=Xe.activeElement,h=te(qt(di(Ve)[0])),i=e,o=(n=te(Xe)).indexOf(Xe.activeElement),r=zt(Ii(s=n[i.shiftKey?o-1:o+1],Ge)),a=Yt(Ii(s,qe)),(r||a)&&(c?null==Ii(c,Ve+","+Ve+" "+Je)&&(c=p(e)):p(e),(!l&&c==h[h.length-1]||l&&c==h[0])&&_i(e))):Di(u,"textarea")||Di(u,"input")||Di(u,"select")||"true"===u.getAttribute("contentEditable")||""===u.getAttribute("contentEditable")||!w.keyboardScrolling||!w.autoScrolling||(-1<[40,38,32,33,34].indexOf(d)&&_i(t),g=t.ctrlKey,L=setTimeout(function(){!function(t){var e=t.shiftKey,i=Xe.activeElement,n=Di(i,"video")||Di(i,"audio");if(P||!([37,39].indexOf(t.keyCode)<0))switch(t.keyCode){case 38:case 33:m.k.up&&rt();break;case 32:if(e&&m.k.up&&!n){rt();break}case 40:case 34:m.k.down&&(32===t.keyCode&&n||at());break;case 36:m.k.up&&ct(1);break;case 35:m.k.down&&ct(di(qe).length);break;case 37:m.k.left&&ut();break;case 39:m.k.right&&ht()}}(t)},150))}function Qt(t){e&&(g=t.ctrlKey)}function Gt(t){2==t.which&&(Z=t.pageY,u.addEventListener("mousemove",ee))}function Jt(t){2==t.which&&u.removeEventListener("mousemove",ee)}function te(t){return[].slice.call(di(H,t)).filter(function(t){return"-1"!==t.getAttribute("tabindex")&&null!==t.offsetParent})}function ee(t){w.autoScrolling&&(P&&(t.pageY<Z&&m.m.up?rt():t.pageY>Z&&m.m.down&&at()),Z=t.pageY)}function ie(t,e,i){var n,o,s=Ii(t,qe),r={slides:t,destiny:e,direction:i,destinyPos:{left:e.offsetLeft},slideIndex:Ti(e),section:s,sectionIndex:Ti(s,qe),anchorLink:s.getAttribute("data-anchor"),slidesNav:di(ri,s)[0],slideAnchor:ye(e),prevSlide:di(Je,s)[0],prevSlideIndex:Ti(di(Je,s)[0]),localIsResizing:v};r.xMovement=(n=r.prevSlideIndex)==(o=r.slideIndex)?"none":o<n?"left":"right",r.direction=r.direction?r.direction:r.xMovement,r.localIsResizing||(P=!1),w.onSlideLeave&&!r.localIsResizing&&"none"!==r.xMovement&&Oi(w.onSlideLeave)&&!1===Xt("onSlideLeave",r)?a=!1:(Ci(e,Re),$i(zi(e),Re),r.localIsResizing||(Nt(r.prevSlide),Ft(e)),!w.loopHorizontal&&w.controlArrows&&(Fi(di(ci,s),0!==r.slideIndex),Fi(di(hi,s),null!=wi(e))),fi(s,Re)&&!r.localIsResizing&&me(r.slideIndex,r.slideAnchor,r.anchorLink,r.sectionIndex),function(t,e){var i=e.destinyPos;if(w.css3){var n="translate3d(-"+Math.round(i.left)+"px, 0px, 0px)";f.test.translate3dH[e.sectionIndex]=n,mi(ae(di(ni,t)),Ee(n)),C=setTimeout(function(){ne(e)},w.scrollingSpeed)}else f.test.left[e.sectionIndex]=Math.round(i.left),ke(t,Math.round(i.left),w.scrollingSpeed,function(){ne(e)})}(t,r))}function ne(t){var e,i;e=t.slidesNav,i=t.slideIndex,w.slidesNavigation&&null!=e&&($i(di(We,e),Re),Ci(di("a",di("li",e)[i]),Re)),t.localIsResizing||(Oi(w.afterSlideLoad)&&Xt("afterSlideLoad",t),P=!0,Wt(t.destiny)),a=!1}function oe(){clearTimeout(b),b=setTimeout(function(){for(var t=0;t<4;t++)y=setTimeout(se,200*t)},200)}function se(){if(re(),n){var t=Xe.activeElement;if(!Di(t,"textarea")&&!Di(t,"input")&&!Di(t,"select")){var e=gi();Math.abs(e-Q)>20*Math.max(Q,e)/100&&(dt(!0),Q=e)}}else bt()}function re(){var t=w.responsive||w.responsiveWidth,e=w.responsiveHeight,i=t&&He.innerWidth<t,n=e&&He.innerHeight<e;t&&e?ft(i||n):t?ft(i):e&&ft(n)}function ae(t){var e="all "+w.scrollingSpeed+"ms "+w.easingcss3;return $i(t,Oe),mi(t,{"-webkit-transition":e,transition:e})}function le(t){return Ci(t,Oe)}function ce(t,e){var i,n,o;i=t,di(w.menu).forEach(function(t){w.menu&&null!=t&&($i(di(We,t),Re),Ci(di('[data-menuanchor="'+i+'"]',t),Re))}),n=t,o=e,w.navigation&&null!=di(Ze)[0]&&($i(di(We,di(Ze)[0]),Re),Ci(n?di('a[href="#'+n+'"]',di(Ze)[0]):di("a",di("li",di(Ze)[0])[o]),Re))}function he(t){var e=Ti(di(Ve)[0],qe),i=Ti(t,qe);return e==i?"none":i<e?"up":"down"}function ue(t){if(!fi(t,oi)){var e=Xe.createElement("div");e.className=Ue,e.style.height=de(t)+"px",Ci(t,oi),Ai(t,e)}}function de(t){var e=E;if(w.paddingTop||w.paddingBottom){var i=t;fi(i,Ne)||(i=Ii(t,qe));var n=parseInt(getComputedStyle(i)["padding-top"])+parseInt(getComputedStyle(i)["padding-bottom"]);e=E-n}return e}function pe(t,e){(e?ae:le)(u),mi(u,Ee(t)),f.test.translate3d=t,setTimeout(function(){$i(u,Oe)},10)}function fe(t){var e=di(qe+'[data-anchor="'+t+'"]',u)[0];if(!e){var i=void 0!==t?t-1:0;e=di(qe)[i]}return e}function ge(t,e){var i=fe(t);if(null!=i){var n,o,s,r=(null==(s=di(Ge+'[data-anchor="'+(n=e)+'"]',o=i)[0])&&(n=void 0!==n?n:0,s=di(Ge,o)[n]),s);ye(i)===T||fi(i,Re)?ve(r):Ht(i,function(){ve(r)})}}function ve(t){null!=t&&ie(Ii(t,ei),t)}function me(t,e,i){var n="";w.anchors.length&&!w.lockAnchors&&(t?(null!=i&&(n=i),null==e&&(e=t),be(n+"/"+(s=e))):(null!=t&&(s=e),be(i))),xe()}function be(t){if(w.recordHistory)location.hash=t;else if(n||r)He.history.replaceState(void 0,void 0,"#"+t);else{var e=He.location.href.split("#")[0];He.location.replace(e+"#"+t)}}function ye(t){if(!t)return null;var e=t.getAttribute("data-anchor"),i=Ti(t);return null==e&&(e=i),e}function xe(){var t=di(Ve)[0],e=di(Je,t)[0],i=ye(t),n=ye(e),o=String(i);e&&(o=o+"-"+n),o=o.replace("/","-").replace("#","");var s=new RegExp("\\b\\s?"+Fe+"-[^\\s]+\\b","g");S.className=S.className.replace(s,""),Ci(S,Fe+"-"+o)}function we(t){var e=[];return e.y=void 0!==t.pageY&&(t.pageY||t.pageX)?t.pageY:t.touches[0].pageY,e.x=void 0!==t.pageX&&(t.pageY||t.pageX)?t.pageX:t.touches[0].pageX,r&&$t(t)&&w.scrollBar&&void 0!==t.touches&&(e.y=t.touches[0].pageY,e.x=t.touches[0].pageX),e}function Se(t,e){tt(0,"internal"),void 0!==e&&(v=!0),ie(Ii(t,ei),t),void 0!==e&&(v=!1),tt(O.scrollingSpeed,"internal")}function Te(t){var e=Math.round(t);if(w.css3&&w.autoScrolling&&!w.scrollBar)pe("translate3d(0px, -"+e+"px, 0px)",!1);else if(w.autoScrolling&&!w.scrollBar)mi(u,{top:-e+"px"}),f.test.top=-e+"px";else{var i=_t(e);Le(i.element,i.options)}}function Ee(t){return{"-webkit-transform":t,"-moz-transform":t,"-ms-transform":t,transform:t}}function Pe(e,t,i){"all"!==t?m[i][t]=e:Object.keys(m[i]).forEach(function(t){m[i][t]=e})}function Ce(t,e,i){w[t]=e,"internal"!==i&&(O[t]=e)}function $e(){var t=w.licenseKey,e="font-size: 15px;background:yellow;";i?t&&t.length<20&&(console.warn("%c This website was made using fullPage.js slider. More info on the following website:",e),console.warn("%c https://alvarotrigo.com/fullPage/",e)):(ui("error","Fullpage.js version 3 has changed its license to GPLv3 and it requires a `licenseKey` option. Read about it here:"),ui("error","https://github.com/alvarotrigo/fullPage.js#options.")),fi(c,De)?ui("error","Fullpage.js can only be initialized once and you are doing it multiple times!"):(w.continuousVertical&&(w.loopTop||w.loopBottom)&&(w.continuousVertical=!1,ui("warn","Option `loopTop/loopBottom` is mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),!w.scrollOverflow||!w.scrollBar&&w.autoScrolling||ui("warn","Options scrollBar:true and autoScrolling:false are mutually exclusive with scrollOverflow:true. Sections with scrollOverflow might not work well in Firefox"),!w.continuousVertical||!w.scrollBar&&w.autoScrolling||(w.continuousVertical=!1,ui("warn","Scroll bars (`scrollBar:true` or `autoScrolling:false`) are mutually exclusive with `continuousVertical`; `continuousVertical` disabled")),w.scrollOverflow&&null==w.scrollOverflowHandler&&(w.scrollOverflow=!1,ui("error","The option `scrollOverflow:true` requires the file `scrolloverflow.min.js`. Please include it before fullPage.js.")),F.forEach(function(t){w[t]&&ui("warn","fullpage.js extensions require fullpage.extensions.min.js file instead of the usual fullpage.js. Requested: "+t)}),w.anchors.forEach(function(e){var t=[].slice.call(di("[name]")).filter(function(t){return t.getAttribute("name")&&t.getAttribute("name").toLowerCase()==e.toLowerCase()}),i=[].slice.call(di("[id]")).filter(function(t){return t.getAttribute("id")&&t.getAttribute("id").toLowerCase()==e.toLowerCase()});if(i.length||t.length){ui("error","data-anchor tags can not have the same value as any `id` element on the site (or `name` element for IE).");var n=i.length?"id":"name";(i.length||t.length)&&ui("error",'"'+e+'" is is being used by another element `'+n+"` property")}}))}function ke(e,i,n,o){var t,s=(t=e).self!=He&&fi(t,ti)?t.scrollLeft:!w.autoScrolling||w.scrollBar?Yi():t.offsetTop,r=i-s,a=0;z=!0;var l=function(){if(z){var t=i;a+=20,n&&(t=He.fp_easings[w.easing](a,s,r,n)),Le(e,t),a<n?setTimeout(l,20):void 0!==o&&o()}else a<n&&o()};l()}function Le(t,e){!w.autoScrolling||w.scrollBar||t.self!=He&&fi(t,ti)?t.self!=He&&fi(t,ti)?t.scrollLeft=e:t.scrollTo(0,e):t.style.top=e+"px"}function Ae(t,e){this.anchor=t.getAttribute("data-anchor"),this.item=t,this.index=Ti(t,e),this.isLast=this.index===t.parentElement.querySelectorAll(e).length-1,this.isFirst=!this.index}function Me(t){Ae.call(this,t,qe)}function Ie(t){Ae.call(this,t,Ge)}$e()}}),window.jQuery&&window.fullpage&&function(e,i){"use strict";e&&i?e.fn.fullpage=function(t){t=e.extend({},t,{$:e}),new i(this[0],t)}:window.fp_utils.showError("error","jQuery is required to use the jQuery fullpage adapter!")}(window.jQuery,window.fullpage),function(l,u,g){"use strict";function i(t,e){var i,n,o,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=h(t.data.options,e)),i=e.$target||g(t.currentTarget).trigger("blur"),(o=g.fancybox.getInstance())&&o.$trigger&&o.$trigger.is(i)||(s=e.selector?g(e.selector):(n=i.attr("data-fancybox")||"")?(s=t.data?t.data.items:[]).length?s.filter('[data-fancybox="'+n+'"]'):g('[data-fancybox="'+n+'"]'):[i],(r=g(s).index(i))<0&&(r=0),(o=g.fancybox.open(s,e,r)).$trigger=i))}if(l.console=l.console||{info:function(t){}},g){if(g.fn.fancybox)return console.info("fancyBox already initialized");var t={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:g.noop,beforeLoad:g.noop,afterLoad:g.noop,beforeShow:g.noop,afterShow:g.noop,beforeClose:g.noop,afterClose:g.noop,onActivate:g.noop,onDeactivate:g.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},o=g(l),r=g(u),s=0,d=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},e=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},c=function(){var t,e=u.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(void 0!==e.style[t])return i[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},h=function(t,e){var i=g.extend(!0,{},t,e);return g.each(e,function(t,e){g.isArray(e)&&(i[t]=e)}),i},n=function(t,e,i){var n=this;n.opts=h({index:i},g.fancybox.defaults),g.isPlainObject(e)&&(n.opts=h(n.opts,e)),g.fancybox.isMobile&&(n.opts=h(n.opts,n.opts.mobile)),n.id=n.opts.id||++s,n.currIndex=parseInt(n.opts.index,10)||0,n.prevIndex=null,n.prevPos=null,n.currPos=0,n.firstRun=!0,n.group=[],n.slides={},n.addContent(t),n.group.length&&n.init()};g.extend(n.prototype,{init:function(){var e,i,n=this,o=n.group[n.currIndex].opts;o.closeExisting&&g.fancybox.close(!0),g("body").addClass("fancybox-active"),!g.fancybox.getInstance()&&!1!==o.hideScrollbar&&!g.fancybox.isMobile&&u.body.scrollHeight>l.innerHeight&&(g("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-u.documentElement.clientWidth)+"px;}</style>"),g("body").addClass("compensate-for-scrollbar")),i="",g.each(o.buttons,function(t,e){i+=o.btnTpl[e]||""}),e=g(n.translate(n,o.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",o.btnTpl.arrowLeft+o.btnTpl.arrowRight))).attr("id","fancybox-container-"+n.id).addClass(o.baseClass).data("FancyBox",n).appendTo(o.parentEl),n.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){n.$refs[t]=e.find(".fancybox-"+t)}),n.trigger("onInit"),n.activate(),n.jumpTo(n.currIndex)},translate:function(t,e){var i=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return void 0===i[e]?t:i[e]})},addContent:function(t){var e,c=this,i=g.makeArray(t);g.each(i,function(t,e){var i,n,o,s,r,a={},l={};g.isPlainObject(e)?l=(a=e).opts||e:"object"===g.type(e)&&g(e).length?(l=(i=g(e)).data()||{},(l=g.extend(!0,{},l,l.options)).$orig=i,a.src=c.opts.src||l.src||i.attr("href"),a.type||a.src||(a.type="inline",a.src=e)):a={type:"html",src:e+""},a.opts=g.extend(!0,{},c.opts,l),g.isArray(l.buttons)&&(a.opts.buttons=l.buttons),g.fancybox.isMobile&&a.opts.mobile&&(a.opts=h(a.opts,a.opts.mobile)),n=a.type||a.opts.type,s=a.src||"",!n&&s&&((o=s.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(n="video",a.opts.video.format||(a.opts.video.format="video/"+("ogv"===o[1]?"ogg":o[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?n="image":s.match(/\.(pdf)((\?|#).*)?$/i)?(n="iframe",a=g.extend(!0,a,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===s.charAt(0)&&(n="inline")),n?a.type=n:c.trigger("objectNeedsType",a),a.contentType||(a.contentType=-1<g.inArray(a.type,["html","inline","ajax"])?"html":a.type),a.index=c.group.length,"auto"==a.opts.smallBtn&&(a.opts.smallBtn=-1<g.inArray(a.type,["html","inline","ajax"])),"auto"===a.opts.toolbar&&(a.opts.toolbar=!a.opts.smallBtn),a.$thumb=a.opts.$thumb||null,a.opts.$trigger&&a.index===c.opts.index&&(a.$thumb=a.opts.$trigger.find("img:first"),a.$thumb.length&&(a.opts.$orig=a.opts.$trigger)),a.$thumb&&a.$thumb.length||!a.opts.$orig||(a.$thumb=a.opts.$orig.find("img:first")),a.$thumb&&!a.$thumb.length&&(a.$thumb=null),a.thumb=a.opts.thumb||(a.$thumb?a.$thumb[0].src:null),"function"===g.type(a.opts.caption)&&(a.opts.caption=a.opts.caption.apply(e,[c,a])),"function"===g.type(c.opts.caption)&&(a.opts.caption=c.opts.caption.apply(e,[c,a])),a.opts.caption instanceof g||(a.opts.caption=void 0===a.opts.caption?"":a.opts.caption+""),"ajax"!==a.type||1<(r=s.split(/\s+/,2)).length&&(a.src=r.shift(),a.opts.filter=r.shift()),a.opts.modal&&(a.opts=g.extend(!0,a.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(a)}),Object.keys(c.slides).length&&(c.updateControls(),(e=c.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var n=this;n.removeEvents(),n.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),n.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),n.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),n.next()}).on("click.fb","[data-fancybox-zoom]",function(t){n[n.isScaledDown()?"scaleToActual":"scaleToFit"]()}),o.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(n.requestId&&e(n.requestId),n.requestId=d(function(){n.update(t)})):(n.current&&"iframe"===n.current.type&&n.$refs.stage.hide(),setTimeout(function(){n.$refs.stage.show(),n.update(t)},g.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(t){var e=(g.fancybox?g.fancybox.getInstance():null).current,i=t.keyCode||t.which;if(9!=i)return!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||g(t.target).is("input,textarea,video,audio,select")?void 0:8===i||27===i?(t.preventDefault(),void n.close(t)):37===i||38===i?(t.preventDefault(),void n.previous()):39===i||40===i?(t.preventDefault(),void n.next()):void n.trigger("afterKeydown",t,i);e.opts.trapFocus&&n.focus(t)}),n.group[n.currIndex].opts.idleTime&&(n.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){n.idleSecondsCounter=0,n.isIdle&&n.showControls(),n.isIdle=!1}),n.idleInterval=l.setInterval(function(){++n.idleSecondsCounter>=n.group[n.currIndex].opts.idleTime&&!n.isDragging&&(n.isIdle=!0,n.idleSecondsCounter=0,n.hideControls())},1e3))},removeEvents:function(){o.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,n){var e,i,o,s,r,a,l,c,h,u=this,d=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(t=parseInt(t,10),!(o=u.current?u.current.opts.loop:u.opts.loop)&&(t<0||d<=t))return!1;if(e=u.firstRun=!Object.keys(u.slides).length,r=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,s=u.createSlide(t),1<d&&((o||s.index<d-1)&&u.createSlide(t+1),(o||0<s.index)&&u.createSlide(t-1)),u.current=s,u.currIndex=s.index,u.currPos=s.pos,u.trigger("beforeShow",e),u.updateControls(),s.forcedDuration=void 0,g.isNumeric(n)?s.forcedDuration=n:n=s.opts[e?"animationDuration":"transitionDuration"],n=parseInt(n,10),i=u.isMoved(s),s.$slide.addClass("fancybox-slide--current"),e)return s.opts.animationEffect&&n&&u.$refs.container.css("transition-duration",n+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(s),void u.preload("image");a=g.fancybox.getTranslate(r.$slide),l=g.fancybox.getTranslate(u.$refs.stage),g.each(u.slides,function(t,e){g.fancybox.stop(e.$slide,!0)}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(h=a.left-(r.pos*a.width+r.pos*r.opts.gutter),g.each(u.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=e.pos*a.width+e.pos*e.opts.gutter;g.fancybox.setTranslate(e.$slide,{top:0,left:i-l.left+h}),e.pos!==s.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>s.pos?"next":"previous")),p(e.$slide),g.fancybox.animate(e.$slide,{top:0,left:(e.pos-s.pos)*a.width+(e.pos-s.pos)*e.opts.gutter},n,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===u.currPos&&u.complete()})})):n&&s.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>s.pos?"next":"previous")),g.fancybox.animate(r.$slide,c,n,function(){r.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),s.isLoaded?u.revealContent(s):u.loadSlide(s),u.preload("image")}},createSlide:function(t){var e,i,n=this;return i=(i=t%n.group.length)<0?n.group.length+i:i,!n.slides[t]&&n.group[i]&&(e=g('<div class="fancybox-slide"></div>').appendTo(n.$refs.stage),n.slides[t]=g.extend(!0,{},n.group[i],{pos:t,$slide:e,isLoaded:!1}),n.updateSlide(n.slides[t])),n.slides[t]},scaleToActual:function(t,e,i){var n,o,s,r,a,l=this,c=l.current,h=c.$content,u=g.fancybox.getTranslate(c.$slide).width,d=g.fancybox.getTranslate(c.$slide).height,p=c.width,f=c.height;l.isAnimating||l.isMoved()||!h||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,g.fancybox.stop(h),t=void 0===t?.5*u:t,e=void 0===e?.5*d:e,(n=g.fancybox.getTranslate(h)).top-=g.fancybox.getTranslate(c.$slide).top,n.left-=g.fancybox.getTranslate(c.$slide).left,r=p/n.width,a=f/n.height,o=.5*u-.5*p,s=.5*d-.5*f,u<p&&(0<(o=n.left*r-(t*r-t))&&(o=0),o<u-p&&(o=u-p)),d<f&&(0<(s=n.top*a-(e*a-e))&&(s=0),s<d-f&&(s=d-f)),l.updateCursor(p,f),g.fancybox.animate(h,{top:s,left:o,scaleX:r,scaleY:a},i||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(t){var e,i=this,n=i.current,o=n.$content;i.isAnimating||i.isMoved()||!o||"image"!=n.type||!n.isLoaded||n.hasError||(i.isAnimating=!0,g.fancybox.stop(o),e=i.getFitPos(n),i.updateCursor(e.width,e.height),g.fancybox.animate(o,{top:e.top,left:e.left,scaleX:e.width/o.width(),scaleY:e.height/o.height()},t||366,function(){i.isAnimating=!1}))},getFitPos:function(t){var e,i,n,o,s=t.$content,r=t.$slide,a=t.width||t.opts.width,l=t.height||t.opts.height,c={};return!!(t.isLoaded&&s&&s.length)&&(e=g.fancybox.getTranslate(this.$refs.stage).width,i=g.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(s.css("marginLeft"))+parseFloat(s.css("marginRight")),i-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(s.css("marginTop"))+parseFloat(s.css("marginBottom")),a&&l||(a=e,l=i),e-.5<(a*=n=Math.min(1,e/a,i/l))&&(a=e),i-.5<(l*=n)&&(l=i),"image"===t.type?(c.top=Math.floor(.5*(i-l))+parseFloat(r.css("paddingTop")),c.left=Math.floor(.5*(e-a))+parseFloat(r.css("paddingLeft"))):"video"===t.contentType&&(a/(o=t.opts.width&&t.opts.height?a/l:t.opts.ratio||16/9)<l?l=a/o:l*o<a&&(a=l*o)),c.width=a,c.height=l,c)},update:function(i){var n=this;g.each(n.slides,function(t,e){n.updateSlide(e,i)})},updateSlide:function(t,e){var i=this,n=t&&t.$content,o=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;i.adjustCaption(t),n&&(o||s||"video"===t.contentType)&&!t.hasError&&(g.fancybox.stop(n),g.fancybox.setTranslate(n,i.getFitPos(t)),t.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),i.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,i=e.current,n=i.$slide;!e.isClosing&&i&&(n.siblings().css({transform:"",opacity:""}),n.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),g.fancybox.animate(n,{top:0,left:0,opacity:1},void 0===t?0:t,function(){n.css({transform:"",opacity:""}),i.isComplete||e.complete()},!1))},isMoved:function(t){var e,i,n=t||this.current;return!!n&&(i=g.fancybox.getTranslate(this.$refs.stage),e=g.fancybox.getTranslate(n.$slide),!n.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-i.top)||.5<Math.abs(e.left-i.left)))},updateCursor:function(t,e){var i,n,o=this,s=o.current,r=o.$refs.container;s&&!o.isClosing&&o.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),n=!!(i=o.canPan(t,e))||o.isZoomable(),r.toggleClass("fancybox-is-zoomable",n),g("[data-fancybox-zoom]").prop("disabled",!n),i?r.addClass("fancybox-can-pan"):n&&("zoom"===s.opts.clickContent||g.isFunction(s.opts.clickContent)&&"zoom"==s.opts.clickContent(s))?r.addClass("fancybox-can-zoomIn"):s.opts.touch&&(s.opts.touch.vertical||1<o.group.length)&&"video"!==s.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var i=!1,n=this.current,o=n.$content;return void 0!==t&&void 0!==e?i=t<n.width&&e<n.height:o&&(i=(i=g.fancybox.getTranslate(o)).width<n.width&&i.height<n.height),i},canPan:function(t,e){var i=this.current,n=null,o=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(o=this.getFitPos(i),void 0!==t&&void 0!==e?n={width:t,height:e}:i.isComplete&&(n=g.fancybox.getTranslate(i.$content)),n&&o&&(o=1.5<Math.abs(n.width-o.width)||1.5<Math.abs(n.height-o.height))),o},loadSlide:function(i){var t,e,n,o=this;if(!i.isLoading&&!i.isLoaded){if(!(i.isLoading=!0)===o.trigger("beforeLoad",i))return i.isLoading=!1;switch(t=i.type,(e=i.$slide).off("refresh").trigger("onReset").addClass(i.opts.slideClass),t){case"image":o.setImage(i);break;case"iframe":o.setIframe(i);break;case"html":o.setContent(i,i.src||i.content);break;case"video":o.setContent(i,i.opts.video.tpl.replace(/\{\{src\}\}/gi,i.src).replace("{{format}}",i.opts.videoFormat||i.opts.video.format||"").replace("{{poster}}",i.thumb||""));break;case"inline":g(i.src).length?o.setContent(i,g(i.src)):o.setError(i);break;case"ajax":o.showLoading(i),n=g.ajax(g.extend({},i.opts.ajax.settings,{url:i.src,success:function(t,e){"success"===e&&o.setContent(i,t)},error:function(t,e){t&&"abort"!==e&&o.setError(i)}})),e.one("onReset",function(){n.abort()});break;default:o.setError(i)}return!0}},setImage:function(e){var t,i=this;setTimeout(function(){var t=e.$image;i.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||i.showLoading(e)},50),i.checkSrcset(e),e.$content=g('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=u.createElement("img")).onerror=function(){g(this).remove(),e.$ghost=null},t.onload=function(){i.afterLoad(e)},e.$ghost=g(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),i.setBigImage(e)},checkSrcset:function(t){var e,i,n,o,s=t.opts.srcset||t.opts.image.srcset;if(s){n=l.devicePixelRatio||1,o=l.innerWidth*n,(i=s.split(",").map(function(t){var n={};return t.trim().split(/\s+/).forEach(function(t,e){var i=parseInt(t.substring(0,t.length-1),10);if(0===e)return n.url=t;i&&(n.value=i,n.postfix=t[t.length-1])}),n})).sort(function(t,e){return t.value-e.value});for(var r=0;r<i.length;r++){var a=i[r];if("w"===a.postfix&&a.value>=o||"x"===a.postfix&&a.value>=n){e=a;break}}!e&&i.length&&(e=i[i.length-1]),e&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=s)}},setBigImage:function(e){var i=this,t=u.createElement("img"),n=g(t);e.$image=n.one("error",function(){i.setError(e)}).one("load",function(){var t;e.$ghost||(i.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),i.afterLoad(e)),i.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<o.width()/o.height()?"100":Math.round(e.width/e.height*100))+"vw"),n.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!i.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),i.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&n.naturalWidth&&n.naturalHeight?n.trigger("load"):t.error&&n.trigger("error")},resolveImageSlideSize:function(t,e,i){var n=parseInt(t.opts.width,10),o=parseInt(t.opts.height,10);t.width=e,t.height=i,0<n&&(t.width=n,t.height=Math.floor(n*i/e)),0<o&&(t.width=Math.floor(o*e/i),t.height=o)},setIframe:function(o){var s,e=this,r=o.opts.iframe,a=o.$slide;o.$content=g('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+o.contentType),o.$iframe=s=g(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(o.$content),r.preload?(e.showLoading(o),s.on("load.fb error.fb",function(t){this.isReady=1,o.$slide.trigger("refresh"),e.afterLoad(o)}),a.on("refresh.fb",function(){var t,e=o.$content,i=r.css.width,n=r.css.height;if(1===s[0].isReady){try{t=s.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(a.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),void 0===i&&(i=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",i||"").css("max-width",""),void 0===n&&(n=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",n||""),a.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(o),s.attr("src",o.src),a.one("onReset",function(){try{g(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}g(this).off("refresh.fb").empty(),o.isLoaded=!1,o.isRevealed=!1})},setContent:function(t,e){var i;this.isClosing||(this.hideLoading(t),t.$content&&g.fancybox.stop(t.$content),t.$slide.empty(),(i=e)&&i.hasOwnProperty&&i instanceof g&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=g("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===g.type(e)&&(e=g("<div>").append(g.trim(e)).contents()),t.opts.filter&&(e=g("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){g(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(g(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),g(e).appendTo(t.$slide),g(e).is("video,audio")&&(g(e).addClass("fancybox-video"),g(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||g(e).attr("width"),t.opts.height=t.opts.height||g(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=g(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){var e=this;e.isClosing||(t.isLoading=!1,t.isLoaded=!0,e.trigger("afterLoad",t),e.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=g(e.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&g('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),e.adjustCaption(t),e.adjustLayout(t),t.pos===e.currPos&&e.updateCursor(),e.revealContent(t))},adjustCaption:function(t){var e,i=this,n=t||i.current,o=n.opts.caption,s=n.opts.preventCaptionOverlap,r=i.$refs.caption,a=!1;r.toggleClass("fancybox-caption--separate",s),s&&o&&o.length&&(n.pos!==i.currPos?((e=r.clone().appendTo(r.parent())).children().eq(0).empty().html(o),a=e.outerHeight(!0),e.empty().remove()):i.$caption&&(a=i.$caption.outerHeight(!0)),n.$slide.css("padding-bottom",a||""))},adjustLayout:function(t){var e,i,n,o,s=t||this.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(n=s.$slide[0].style["padding-bottom"],o=s.$slide.css("padding-bottom"),0<parseFloat(o)&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(i=o),s.$slide.css("padding-bottom",n))),s.$content.css("margin-bottom",i))},revealContent:function(t){var e,i,n,o,s=this,r=t.$slide,a=!1,l=!1,c=s.isMoved(t),h=t.isRevealed;return t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],n=t.opts[s.firstRun?"animationDuration":"transitionDuration"],n=parseInt(void 0===t.forcedDuration?n:t.forcedDuration,10),!c&&t.pos===s.currPos&&n||(e=!1),"zoom"===e&&(t.pos===s.currPos&&n&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?a=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,"auto"==(o=t.opts.zoomOpacity)&&(o=.1<Math.abs(t.width/t.height-l.width/l.height)),o&&(l.opacity=.1,a.opacity=1),g.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),void g.fancybox.animate(t.$content,a,n,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(g.fancybox.stop(r),i="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(i).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),void g.fancybox.animate(r,"fancybox-slide--current",n,function(){r.removeClass(i).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),h||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===s.currPos&&s.complete())))},getThumbPos:function(t){var e,i,n,o,s,r,a,l,c=!1,h=t.$thumb;return!(!h||(!(r=h[0])||r.ownerDocument!==u||(g(".fancybox-container").css("pointer-events","none"),a={x:r.getBoundingClientRect().left+r.offsetWidth/2,y:r.getBoundingClientRect().top+r.offsetHeight/2},l=u.elementFromPoint(a.x,a.y)===r,g(".fancybox-container").css("pointer-events",""),!l)))&&(e=g.fancybox.getTranslate(h),i=parseFloat(h.css("border-top-width")||0),n=parseFloat(h.css("border-right-width")||0),o=parseFloat(h.css("border-bottom-width")||0),s=parseFloat(h.css("border-left-width")||0),c={top:e.top+i,left:e.left+s,width:e.width-n-s,height:e.height-i-o,scaleX:1,scaleY:1},0<e.width&&0<e.height&&c)},complete:function(){var t,i=this,e=i.current,n={};!i.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),i.preload("inline"),p(e.$slide),e.$slide.addClass("fancybox-slide--complete"),g.each(i.slides,function(t,e){e.pos>=i.currPos-1&&e.pos<=i.currPos+1?n[e.pos]=e:e&&(g.fancybox.stop(e.$slide),e.$slide.off().remove())}),i.slides=n),i.isAnimating=!1,i.updateCursor(),i.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),i.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):i.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,i,n=this;n.group.length<2||(i=n.slides[n.currPos+1],(e=n.slides[n.currPos-1])&&e.type===t&&n.loadSlide(e),i&&i.type===t&&n.loadSlide(i))},focus:function(t,e){var i,n,o=this,s=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");o.isClosing||((i=(i=!t&&o.current&&o.current.isComplete?o.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):o.$refs.container.find("*:visible")).filter(s).filter(function(){return"hidden"!==g(this).css("visibility")&&!g(this).hasClass("disabled")})).length?(n=i.index(u.activeElement),t&&t.shiftKey?(n<0||0==n)&&(t.preventDefault(),i.eq(i.length-1).trigger("focus")):(n<0||n==i.length-1)&&(t&&t.preventDefault(),i.eq(0).trigger("focus"))):o.$refs.container.trigger("focus"))},activate:function(){var e=this;g(".fancybox-container").each(function(){var t=g(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function i(){h.cleanUp(t)}var n,o,s,r,a,l,c,h=this,u=h.current;return!h.isClosing&&(!(h.isClosing=!0)===h.trigger("beforeClose",t)?(h.isClosing=!1,d(function(){h.update()}),!1):(h.removeEvents(),s=u.$content,n=u.opts.animationEffect,o=g.isNumeric(e)?e:n?u.opts.animationDuration:0,u.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?g.fancybox.stop(u.$slide):n=!1,u.$slide.siblings().trigger("onReset").remove(),o&&h.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",o+"ms"),h.hideLoading(u),h.hideControls(!0),h.updateCursor(),"zoom"!==n||s&&o&&"image"===u.type&&!h.isMoved()&&!u.hasError&&(c=h.getThumbPos(u))||(n="fade"),"zoom"===n?(g.fancybox.stop(s),l={top:(r=g.fancybox.getTranslate(s)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(a=u.opts.zoomOpacity)&&(a=.1<Math.abs(u.width/u.height-c.width/c.height)),a&&(c.opacity=0),g.fancybox.setTranslate(s,l),p(s),g.fancybox.animate(s,c,o,i)):n&&o?g.fancybox.animate(u.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+n,o,i):!0===t?setTimeout(i,o):i(),!0))},cleanUp:function(t){var e,i,n,o=this,s=o.current.opts.$orig;o.current.$slide.trigger("onReset"),o.$refs.container.empty().remove(),o.trigger("afterClose",t),o.current.opts.backFocus&&(s&&s.length&&s.is(":visible")||(s=o.$trigger),s&&s.length&&(i=l.scrollX,n=l.scrollY,s.trigger("focus"),g("html, body").scrollTop(n).scrollLeft(i))),o.current=null,(e=g.fancybox.getInstance())?e.activate():(g("body").removeClass("fancybox-active compensate-for-scrollbar"),g("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,n=Array.prototype.slice.call(arguments,1),o=this,s=e&&e.opts?e:o.current;if(s?n.unshift(s):s=o,n.unshift(o),g.isFunction(s.opts[t])&&(i=s.opts[t].apply(s,n)),!1===i)return i;"afterClose"!==t&&o.$refs?o.$refs.container.trigger(t+".fb",n):r.trigger(t+".fb",n)},updateControls:function(){var t=this,e=t.current,i=e.index,n=t.$refs.container,o=t.$refs.caption,s=e.opts.caption;e.$slide.trigger("refresh"),s&&s.length?(t.$caption=o).children().eq(0).html(s):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),n.find("[data-fancybox-count]").html(t.group.length),n.find("[data-fancybox-index]").html(i+1),n.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&i<=0),n.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&i>=t.group.length-1),"image"===e.type?n.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&n.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),g(u.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this,e=t.current?t.current.opts:t.opts,i=t.$refs.container;t.hasHiddenControls=!1,t.idleSecondsCounter=0,i.toggleClass("fancybox-show-toolbar",!(!e.toolbar||!e.buttons)).toggleClass("fancybox-show-infobar",!!(e.infobar&&1<t.group.length)).toggleClass("fancybox-show-caption",!!t.$caption).toggleClass("fancybox-show-nav",!!(e.arrows&&1<t.group.length)).toggleClass("fancybox-is-modal",!!e.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),g.fancybox={version:"3.5.7",defaults:t,getInstance:function(t){var e=g('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof n&&("string"===g.type(t)?e[t].apply(e,i):"function"===g.type(t)&&t.apply(e,i),e)},open:function(t,e,i){return new n(t,e,i)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(f=u.createElement("div"),l.getComputedStyle&&l.getComputedStyle(f)&&l.getComputedStyle(f).getPropertyValue("transform")&&!(u.documentMode&&u.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var i="",n={};if(t&&e)return void 0===e.left&&void 0===e.top||(i=(void 0===e.left?t.position().left:e.left)+"px, "+(void 0===e.top?t.position().top:e.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),void 0!==e.scaleX&&void 0!==e.scaleY?i+=" scale("+e.scaleX+", "+e.scaleY+")":void 0!==e.scaleX&&(i+=" scaleX("+e.scaleX+")"),i.length&&(n.transform=i),void 0!==e.opacity&&(n.opacity=e.opacity),void 0!==e.width&&(n.width=e.width),void 0!==e.height&&(n.height=e.height),t.css(n)},animate:function(e,i,n,o,s){var r,a=this;g.isFunction(n)&&(o=n,n=null),a.stop(e),r=a.getTranslate(e),e.on(c,function(t){t&&t.originalEvent&&(!e.is(t.originalEvent.target)||"z-index"==t.originalEvent.propertyName)||(a.stop(e),g.isNumeric(n)&&e.css("transition-duration",""),g.isPlainObject(i)?void 0!==i.scaleX&&void 0!==i.scaleY&&a.setTranslate(e,{top:i.top,left:i.left,width:r.width*i.scaleX,height:r.height*i.scaleY,scaleX:1,scaleY:1}):!0!==s&&e.removeClass(i),g.isFunction(o)&&o(t))}),g.isNumeric(n)&&e.css("transition-duration",n+"ms"),g.isPlainObject(i)?(void 0!==i.scaleX&&void 0!==i.scaleY&&(delete i.width,delete i.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),g.fancybox.setTranslate(e,i)):e.addClass(i),e.data("timer",setTimeout(function(){e.trigger(c)},n+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(c),t.off(c).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},g.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?g("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},i):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},i),this},r.on("click.fb-start","[data-fancybox]",i),r.on("click.fb-start","[data-fancybox-trigger]",function(t){g('[data-fancybox="'+g(this).attr("data-fancybox-trigger")+'"]').eq(g(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:g(this)})}),a=null,r.on("mousedown mouseup focus blur",".fancybox-button",function(t){switch(t.type){case"mousedown":a=g(this);break;case"mouseup":a=null;break;case"focusin":g(".fancybox-button").removeClass("fancybox-focus"),g(this).is(a)||g(this).is("[disabled]")||g(this).addClass("fancybox-focus");break;case"focusout":g(".fancybox-button").removeClass("fancybox-focus")}})}var a,f}(window,document,jQuery),function(p){"use strict";function f(i,t,e){if(i)return e=e||"","object"===p.type(e)&&(e=p.param(e,!0)),p.each(t,function(t,e){i=i.replace("$"+t,e||"")}),e.length&&(i+=(0<i.indexOf("?")?"&":"?")+e),i}var n={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};p(document).on("objectNeedsType.fb",function(t,e,o){var i,s,r,a,l,c,h,u=o.src||"",d=!1;i=p.extend(!0,{},n,o.opts.media),p.each(i,function(t,e){if(r=u.match(e.matcher)){if(d=e.type,h=t,c={},e.paramPlace&&r[e.paramPlace]){"?"==(l=r[e.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var i=0;i<l.length;++i){var n=l[i].split("=",2);2==n.length&&(c[n[0]]=decodeURIComponent(n[1].replace(/\+/g," ")))}}return a=p.extend(!0,{},e.params,o.opts[t],c),u="function"===p.type(e.url)?e.url.call(this,r,a,o):f(e.url,r,a),s="function"===p.type(e.thumb)?e.thumb.call(this,r,a,o):f(e.thumb,r),"youtube"===t?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,i,n){return"&start="+((i?60*parseInt(i,10):0)+parseInt(n,10))}):"vimeo"===t&&(u=u.replace("&%23","#")),!1}}),d?(o.opts.thumb||o.opts.$thumb&&o.opts.$thumb.length||(o.opts.thumb=s),"iframe"===d&&(o.opts=p.extend(!0,o.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(o,{type:d,src:u,origSrc:o.src,contentSource:h,contentType:"image"===d?"image":"gmap_place"==h||"gmap_search"==h?"map":"video"})):u&&(o.type=o.opts.defaultType)});var o={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,i=this;this[t].loaded?setTimeout(function(){i.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){i[t].loaded=!0,i.done(t)}:e.onload=function(){i[t].loaded=!0,i.done(t)},document.body.appendChild(e))},done:function(t){var e,i;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=p.fancybox.getInstance())&&(i=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){e.next()}))}};p(document).on({"afterShow.fb":function(t,e,i){1<e.group.length&&("youtube"===i.contentSource||"vimeo"===i.contentSource)&&o.load(i.contentSource)}})}(jQuery),function(g,l,v){"use strict";function h(t){var e=[];for(var i in t=(t=t.originalEvent||t||g.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[i].pageX?e.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&e.push({x:t[i].clientX,y:t[i].clientY});return e}function m(t,e,i){return e&&t?"x"===i?t.x-e.x:"y"===i?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||v.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,i=t[0].attributes,n=i.length;e<n;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return 1}function u(t){for(var e=!1;(i=t.get(0),0,n=g.getComputedStyle(i)["overflow-y"],o=g.getComputedStyle(i)["overflow-x"],s=("scroll"===n||"auto"===n)&&i.scrollHeight>i.clientHeight,r=("scroll"===o||"auto"===o)&&i.scrollWidth>i.clientWidth,!(e=s||r))&&((t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body")););var i,n,o,s,r;return e}function i(t){var e=this;e.instance=t,e.$bg=t.$refs.bg,e.$stage=t.$refs.stage,e.$container=t.$refs.container,e.destroy(),e.$container.on("touchstart.fb.touch mousedown.fb.touch",v.proxy(e,"ontouchstart"))}var b=g.requestAnimationFrame||g.webkitRequestAnimationFrame||g.mozRequestAnimationFrame||g.oRequestAnimationFrame||function(t){return g.setTimeout(t,1e3/60)},y=g.cancelAnimationFrame||g.webkitCancelAnimationFrame||g.mozCancelAnimationFrame||g.oCancelAnimationFrame||function(t){g.clearTimeout(t)};i.prototype.destroy=function(){var t=this;t.$container.off(".fb.touch"),v(l).off(".fb.touch"),t.requestId&&(y(t.requestId),t.requestId=null),t.tapped&&(clearTimeout(t.tapped),t.tapped=null)},i.prototype.ontouchstart=function(t){var e=this,i=v(t.target),n=e.instance,o=n.current,s=o.$slide,r=o.$content,a="touchstart"==t.type;if(a&&e.$container.off("mousedown.fb.touch"),(!t.originalEvent||2!=t.originalEvent.button)&&s.length&&i.length&&!c(i)&&!c(i.parent())&&(i.is("img")||!(t.originalEvent.clientX>i[0].clientWidth+i.offset().left))){if(!o||n.isAnimating||o.$slide.hasClass("fancybox-animated"))return t.stopPropagation(),void t.preventDefault();e.realPoints=e.startPoints=h(t),e.startPoints.length&&(o.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=i,e.$content=r,e.opts=o.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=n.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(s[0].clientWidth),e.canvasHeight=Math.round(s[0].clientHeight),e.contentLastPos=null,e.contentStartPos=v.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=v.fancybox.getTranslate(s),e.stagePos=v.fancybox.getTranslate(n.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,v(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",v.proxy(e,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",v.proxy(e,"ontouchmove")),v.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),((e.opts||e.canPan)&&(i.is(e.$stage)||e.$stage.find(i).length)||(i.is(".fancybox-image")&&t.preventDefault(),v.fancybox.isMobile&&i.parents(".fancybox-caption").length))&&(e.isScrollable=u(i)||u(i.parent()),v.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!o.hasError||(e.canPan?(v.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length&&"image"===o.type&&(o.isLoaded||o.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,v.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-v(g).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-v(g).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=m(e.startPoints[0],e.startPoints[1]))))}},i.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},i.prototype.ontouchmove=function(t){var e=this;return void 0!==t.originalEvent.buttons&&0===t.originalEvent.buttons?void e.ontouchend(t):e.isScrolling?void(e.canTap=!1):(e.newPoints=h(t),void((e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=m(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=m(e.newPoints[0],e.startPoints[0],"y"),e.distance=m(e.newPoints[0],e.startPoints[0]),0<e.distance&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))))},i.prototype.onSwipe=function(t){var e,o=this,s=o.instance,i=o.isSwiping,n=o.sliderStartPos.left||0;if(!0!==i)"x"==i&&(0<o.distanceX&&(o.instance.group.length<2||0===o.instance.current.index&&!o.instance.current.opts.loop)?n+=Math.pow(o.distanceX,.8):o.distanceX<0&&(o.instance.group.length<2||o.instance.current.index===o.instance.group.length-1&&!o.instance.current.opts.loop)?n-=Math.pow(-o.distanceX,.8):n+=o.distanceX),o.sliderLastPos={top:"x"==i?0:o.sliderStartPos.top+o.distanceY,left:n},o.requestId&&(y(o.requestId),o.requestId=null),o.requestId=b(function(){o.sliderLastPos&&(v.each(o.instance.slides,function(t,e){var i=e.pos-o.instance.currPos;v.fancybox.setTranslate(e.$slide,{top:o.sliderLastPos.top,left:o.sliderLastPos.left+i*o.canvasWidth+i*e.opts.gutter})}),o.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(o.distance)){if(o.canTap=!1,s.group.length<2&&o.opts.vertical?o.isSwiping="y":s.isDragging||!1===o.opts.vertical||"auto"===o.opts.vertical&&800<v(g).width()?o.isSwiping="x":(e=Math.abs(180*Math.atan2(o.distanceY,o.distanceX)/Math.PI),o.isSwiping=45<e&&e<135?"y":"x"),"y"===o.isSwiping&&v.fancybox.isMobile&&o.isScrollable)return void(o.isScrolling=!0);s.isDragging=o.isSwiping,o.startPoints=o.newPoints,v.each(s.slides,function(t,e){var i,n;v.fancybox.stop(e.$slide),i=v.fancybox.getTranslate(e.$slide),n=v.fancybox.getTranslate(s.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===s.current.pos&&(o.sliderStartPos.top=i.top-n.top,o.sliderStartPos.left=i.left-n.left),v.fancybox.setTranslate(e.$slide,{top:i.top-n.top,left:i.left-n.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}},i.prototype.onPan=function(){var t=this;m(t.newPoints[0],t.realPoints[0])<(v.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&y(t.requestId),t.requestId=b(function(){v.fancybox.setTranslate(t.$content,t.contentLastPos)}))},i.prototype.limitMovement=function(){var t,e,i,n,o,s,r=this,a=r.canvasWidth,l=r.canvasHeight,c=r.distanceX,h=r.distanceY,u=r.contentStartPos,d=u.left,p=u.top,f=u.width,g=u.height;return o=a<f?d+c:d,s=p+h,t=Math.max(0,.5*a-.5*f),e=Math.max(0,.5*l-.5*g),i=Math.min(a-f,.5*a-.5*f),n=Math.min(l-g,.5*l-.5*g),0<c&&t<o&&(o=t-1+Math.pow(-t+d+c,.8)||0),c<0&&o<i&&(o=i+1-Math.pow(i-d-c,.8)||0),0<h&&e<s&&(s=e-1+Math.pow(-e+p+h,.8)||0),h<0&&s<n&&(s=n+1-Math.pow(n-p-h,.8)||0),{top:s,left:o}},i.prototype.limitPosition=function(t,e,i,n){var o=this.canvasWidth,s=this.canvasHeight;return t=o<i?(t=0<t?0:t)<o-i?o-i:t:Math.max(0,o/2-i/2),{top:e=s<n?(e=0<e?0:e)<s-n?s-n:e:Math.max(0,s/2-n/2),left:t}},i.prototype.onZoom=function(){var t=this,e=t.contentStartPos,i=e.width,n=e.height,o=e.left,s=e.top,r=m(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,a=Math.floor(i*r),l=Math.floor(n*r),c=(i-a)*t.percentageOfImageAtPinchPointX,h=(n-l)*t.percentageOfImageAtPinchPointY,u=(t.newPoints[0].x+t.newPoints[1].x)/2-v(g).scrollLeft(),d=(t.newPoints[0].y+t.newPoints[1].y)/2-v(g).scrollTop(),p=u-t.centerPointStartX,f={top:s+(h+(d-t.centerPointStartY)),left:o+(c+p),scaleX:r,scaleY:r};t.canTap=!1,t.newWidth=a,t.newHeight=l,t.contentLastPos=f,t.requestId&&y(t.requestId),t.requestId=b(function(){v.fancybox.setTranslate(t.$content,t.contentLastPos)})},i.prototype.ontouchend=function(t){var e=this,i=e.isSwiping,n=e.isPanning,o=e.isZooming,s=e.isScrolling;if(e.endPoints=h(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),v(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(y(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,n?e.endPanning():o?e.endZooming():e.endSwiping(i,s)},i.prototype.endSwiping=function(t,e){var i=this,n=!1,o=i.instance.group.length,s=Math.abs(i.distanceX),r="x"==t&&1<o&&(130<i.dMs&&10<s||50<s);i.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(i.distanceY)?(v.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),n=i.instance.close(!0,250)):r&&0<i.distanceX?n=i.instance.previous(300):r&&i.distanceX<0&&(n=i.instance.next(300)),!1!==n||"x"!=t&&"y"!=t||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var t,e,i,n=this;n.contentLastPos&&(e=!1===n.opts.momentum||350<n.dMs?(t=n.contentLastPos.left,n.contentLastPos.top):(t=n.contentLastPos.left+500*n.velocityX,n.contentLastPos.top+500*n.velocityY),(i=n.limitPosition(t,e,n.contentStartPos.width,n.contentStartPos.height)).width=n.contentStartPos.width,i.height=n.contentStartPos.height,v.fancybox.animate(n.$content,i,366))},i.prototype.endZooming=function(){var t,e,i,n,o=this,s=o.instance.current,r=o.newWidth,a=o.newHeight;o.contentLastPos&&(t=o.contentLastPos.left,n={top:e=o.contentLastPos.top,left:t,width:r,height:a,scaleX:1,scaleY:1},v.fancybox.setTranslate(o.$content,n),r<o.canvasWidth&&a<o.canvasHeight?o.instance.scaleToFit(150):r>s.width||a>s.height?o.instance.scaleToActual(o.centerPointStartX,o.centerPointStartY,150):(i=o.limitPosition(t,e,r,a),v.fancybox.animate(o.$content,i,150)))},i.prototype.onTap=function(i){function t(t){var e=r.opts[t];if(v.isFunction(e)&&(e=e.apply(s,[r,i])),e)switch(e){case"close":s.close(n.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(n.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(n.startEvent))}}var e,n=this,o=v(i.target),s=n.instance,r=s.current,a=i&&h(i)||n.startPoints,l=a[0]?a[0].x-v(g).scrollLeft()-n.stagePos.left:0,c=a[0]?a[0].y-v(g).scrollTop()-n.stagePos.top:0;if((!i.originalEvent||2!=i.originalEvent.button)&&(o.is("img")||!(l>o[0].clientWidth+o.offset().left))){if(o.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))e="Outside";else if(o.is(".fancybox-slide"))e="Slide";else{if(!s.current.$content||!s.current.$content.find(o).addBack().filter(o).length)return;e="Content"}if(n.tapped){if(clearTimeout(n.tapped),n.tapped=null,50<Math.abs(l-n.tapX)||50<Math.abs(c-n.tapY))return this;t("dblclick"+e)}else n.tapX=l,n.tapY=c,r.opts["dblclick"+e]&&r.opts["dblclick"+e]!==r.opts["click"+e]?n.tapped=setTimeout(function(){n.tapped=null,s.isAnimating||t("click"+e)},500):t("click"+e);return this}},v(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new i(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(r,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function i(t){this.instance=t,this.init()}a.extend(i.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,i=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=a('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this,i=e.instance,n=i.current;n&&(!0===t||n.opts.loop||i.currIndex<i.group.length-1)?e.isActive&&"video"!==n.contentType&&(e.$progress&&a.fancybox.animate(e.$progress.show(),{scaleX:1},n.opts.slideShow.speed),e.timer=setTimeout(function(){i.current.opts.loop||i.current.index!=i.group.length-1?i.next():i.jumpTo(0)},n.opts.slideShow.speed)):(e.stop(),i.idleSecondsCounter=0,i.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this,e=t.instance.current;e&&(t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),t.isActive=!0,e.isComplete&&t.set(!0),t.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this,e=t.instance.current;t.clear(),t.$button.attr("title",(e.opts.i18n[e.opts.lang]||e.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),t.isActive=!1,t.instance.trigger("onSlideShowChange",!1),t.$progress&&t.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),a(r).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new i(e))},"beforeShow.fb":function(t,e,i,n){var o=e&&e.SlideShow;n?o&&i.opts.slideShow.autoStart&&o.start():o&&o.isActive&&o.clear()},"afterShow.fb":function(t,e,i){var n=e&&e.SlideShow;n&&n.isActive&&n.set()},"afterKeydown.fb":function(t,e,i,n,o){var s=e&&e.SlideShow;!s||!i.opts.slideShow||80!==o&&32!==o||a(r.activeElement).is("button,a,input")||(n.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var i=e&&e.SlideShow;i&&i.stop()}}),a(r).on("visibilitychange",function(){var t=a.fancybox.getInstance(),e=t&&t.SlideShow;e&&e.isActive&&(r.hidden?e.clear():e.set())})}(document,jQuery),function(s,i){"use strict";var n=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},i=0;i<t.length;i++){var n=t[i];if(n&&n[1]in s){for(var o=0;o<n.length;o++)e[t[0][o]]=n[o];return e}}return!1}();if(n){var o={request:function(t){(t=t||s.documentElement)[n.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){s[n.exitFullscreen]()},toggle:function(t){t=t||s.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(s[n.fullscreenElement])},enabled:function(){return Boolean(s[n.fullscreenEnabled])}};i.extend(!0,i.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),i(s).on(n.fullscreenchange,function(){var t=o.isFullscreen(),e=i.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}i(s).on({"onInit.fb":function(t,e){n?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),o.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&o.request(),e.FullScreen=o):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,i,n,o){e&&e.FullScreen&&70===o&&(n.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&o.exit()}})}(document,jQuery),function(t,s){"use strict";var r="fancybox-thumbs";s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults);function n(t){this.init(t)}s.extend(n.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,i=t.group,n=0;e.instance=t,e.opts=i[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var o=0,s=i.length;o<s&&(i[o].thumb&&n++,!(1<n));o++);1<n&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var i,t=this,e=t.instance,n=t.opts.parentEl,o=[];t.$grid||(t.$grid=s('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(n).addBack().filter(n)),t.$grid.on("click","a",function(){e.jumpTo(s(this).attr("data-index"))})),t.$list||(t.$list=s('<div class="'+r+'__list">').appendTo(t.$grid)),s.each(e.group,function(t,e){(i=e.thumb)||"image"!==e.type||(i=e.src),o.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(i&&i.length?' style="background-image:url('+i+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=o.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,i,n=this,o=n.$list,s=n.$grid;n.instance.current&&(i=(e=o.children().removeClass("fancybox-thumbs-active").filter('[data-index="'+n.instance.current.index+'"]').addClass("fancybox-thumbs-active")).position(),"y"===n.opts.axis&&(i.top<0||i.top>o.height()-e.outerHeight())?o.stop().animate({scrollTop:o.scrollTop()+i.top},t):"x"===n.opts.axis&&(i.left<s.scrollLeft()||i.left>s.scrollLeft()+(s.width()-e.outerWidth()))&&o.parent().stop().animate({scrollLeft:i.left},t))},update:function(){var t=this;t.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),t.isVisible?(t.$grid||t.create(),t.instance.trigger("onThumbsShow"),t.focus(0)):t.$grid&&t.instance.trigger("onThumbsHide"),t.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(t).on({"onInit.fb":function(t,e){var i;!e||e.Thumbs||(i=new n(e)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(t,e,i,n){var o=e&&e.Thumbs;o&&o.isVisible&&o.focus(n?0:250)},"afterKeydown.fb":function(t,e,i,n,o){var s=e&&e.Thumbs;s&&s.isActive&&71===o&&(n.preventDefault(),s.toggle())},"beforeClose.fb":function(t,e){var i=e&&e.Thumbs;i&&i.isVisible&&!1!==i.opts.hideOnClose&&i.$grid.hide()}})}(document,jQuery),function(t,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),s(t).on("click","[data-fancybox-share]",function(){var t,e,i,n=s.fancybox.getInstance(),o=n.current||null;o&&("function"===s.type(o.opts.share.url)&&(t=o.opts.share.url.apply(o,[n,o])),e=o.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===o.type?encodeURIComponent(o.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return i[t]}))).replace(/\{\{descr\}\}/g,n.$caption?encodeURIComponent(n.$caption.text()):""),s.fancybox.open({src:n.translate(n,e),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){n.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,o){"use strict";function a(){var t=s.location.hash.substr(1),e=t.split("-"),i=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:i<1?1:i,gallery:e.join("-")}}function e(t){""!==t.gallery&&o("[data-fancybox='"+o.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function l(t){var e,i;return!!t&&(""!==(i=(e=t.current?t.current.opts:t.opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&i)}o.escapeSelector||(o.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),o(function(){!1!==o.fancybox.defaults.hash&&(o(r).on({"onInit.fb":function(t,e){var i,n;!1!==e.group[e.currIndex].opts.hash&&(i=a(),(n=l(e))&&i.gallery&&n==i.gallery&&(e.currIndex=i.index-1))},"beforeShow.fb":function(t,e,i,n){var o;i&&!1!==i.opts.hash&&(o=l(e))&&(e.currentHash=o+(1<e.group.length?"-"+(i.index+1):""),s.location.hash!=="#"+e.currentHash&&(n&&!e.origHash&&(e.origHash=s.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[n?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+e.currentHash),n&&(e.hasCreatedHistory=!0)):s.location.hash=e.currentHash,e.hashTimer=null},300)))},"beforeClose.fb":function(t,e,i){i&&!1!==i.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?s.history.back():e.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(e.origHash||"")):s.location.hash=e.origHash),e.currentHash=null)}}),o(s).on("hashchange.fb",function(){var t=a(),n=null;o.each(o(".fancybox-container").get().reverse(),function(t,e){var i=o(e).data("FancyBox");if(i&&i.currentHash)return n=i,!1}),n?n.currentHash===t.gallery+"-"+t.index||1===t.index&&n.currentHash==t.gallery||(n.currentHash=null,n.close()):""!==t.gallery&&e(t)}),setTimeout(function(){o.fancybox.getInstance()||e(a())},50))})}(window,document,jQuery),function(t,e){"use strict";var o=(new Date).getTime();e(t).on({"onInit.fb":function(t,n,e){n.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=n.current,i=(new Date).getTime();n.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-o<250||(o=i,n[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
